<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Woman on Rails</title>
    <description></description>
    <link>https://womanonrails.com/pl/</link>
    <atom:link href="https://womanonrails.com/pl/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 16 Jan 2019 03:06:12 -0500</pubDate>
    <lastBuildDate>Wed, 16 Jan 2019 03:06:12 -0500</lastBuildDate>
    <generator>Jekyll v3.4.2</generator>
    
      
      <item>
        <title>Jak ustawić niestandardowy czas w przeglądarce dla testów aplikacji?</title>
        <description>&lt;p&gt;Nie przepadam za zmienianiem ustawień użytkownika, gdy wszystko działa dobrze. Tym razem potrzebowałam przetestować funkcjonalność, która wymagała zrobienia tego w różnych strefach czasowych. Znalazłam sposób by zrobić to bez zmiany moich standardowych ustawień.&lt;/p&gt;

&lt;p&gt;Pracuję w projekcie, gdzie używamy zewnętrznego API dla danych pogodowych, które później wyświetlamy użytkownikowi. Był tam pewien błąd z brakującymi wartościami dla konkretnych przedziałów czasowych. Gdy użytkownik prosił o dane z października, brakowało mu zawsze ostatniego dnia (31.10). Natomiast prosząc o dane z września wszystko działało poprawnie. Okazało się, że problem wynikał z przesunięcia czasu związanego z przejściem z czasu letniego (CEST) na czas zimowy (CET). W 2018 roku odbyło się to 28-go października. Brakująca godzina zmieniała się na końcu miesiąca w brakujący dzień. Problem naprawiłam, ale chciałam być pewna na 100%, że nie wystąpi on też dla innych stref czasowych, również poza Europą. Zaplanowałam sobie sesję testów manualnych. Oczywiście, na naszych komputerach jest możliwość zmiany ustawień czasu zarówno w systemie jak i dla przeglądarki. Nie chciałam jednak tego robić. Podczas ostatniej takiej próby mój kalendarz pokazywał błędne godziny, a powiadomienia o spotkaniach przychodziły po ich zakończeniu. Nauczona na błędach szukałam innego rozwiązania.&lt;/p&gt;

&lt;p&gt;Z pomocą, jak zawsze, przyszedł Google. Znalazłam tam bardzo fajne rozwiązanie mojego problemu dla przeglądarki Chrome. Wystarczy stworzyć katalog dla nowego profilu przeglądarki (nazwa jest całkowicie dowolna ja wybrałam &lt;code&gt;chrome-profile&lt;/code&gt;):&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;mkdir &lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;/chrome-profile
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;następnie wybrać strefę czasową i wpisać ją do zmiennej środowiskowej &lt;code&gt;TZ&lt;/code&gt; (skrót od time zone):&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;TZ&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;US/Pacific&amp;#39;&lt;/span&gt; google-chrome &lt;span class=&quot;s2&quot;&gt;&amp;quot;--user-data-dir=$HOME/chrome-profile&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;po pracy wystarczy skasować katalog tego profilu:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;rm -rf &lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;/chrome-profile
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To wszystko! Możesz uruchomić przeglądarkę w różnych strefach czasowych nie zmieniając swoich ustawień. Chciałabym zwrócić tutaj uwagę na jedną drobną rzecz. Musisz znać &lt;strong&gt;dokładną nazwę strefy czasowej&lt;/strong&gt;. To jest szczególnie ważne dla osób takich jak ja, które robią dużo literówek. W przypadku złej nazwy strefy przeglądarka otworzy się &lt;strong&gt;bez żadnych błędów&lt;/strong&gt;, ale będzie miała ustawioną Twoją &lt;strong&gt;standardową strefę czasową&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Dzięki za przeczytanie i do następnego razu! Trzymaj się!&lt;/p&gt;
</description>
        <pubDate>Wed, 09 Jan 2019 00:00:00 -0500</pubDate>
        <link>https://womanonrails.com/pl/custom-time-in-browser</link>
        <guid isPermaLink="true">https://womanonrails.com/pl/custom-time-in-browser</guid>
        
        <category>TIL</category>
        
        <category>przeglądarka</category>
        
        <category>Linuks</category>
        
        
        <category>narzędzia</category>
        
      </item>
    
      
      <item>
        <title>Refaktoring w Ruby krok po kroku - część 2</title>
        <description>&lt;p&gt;Ostatnim razem w artykule &lt;a href=&quot;https://womanonrails.com/pl/refactoring-step-by-step&quot;&gt;Refactoring w Ruby krok po kroku - część 1&lt;/a&gt; przeszłyśmy od kodu proceduralnego do kodu bardziej zorientowanego obiektowo. Tym razem będziemy kontynuować naszą podróż przez refaktoring. Będziemy mówić o małych obiektach zastępujących duże klasy, o kompozycji i o wstrzykiwaniu konkretnych zachowań do obiektów. Zaczynajmy!&lt;/p&gt;

&lt;h1&gt;Krok 8 - Bardziej opisowe wyniki&lt;/h1&gt;

&lt;p&gt;Ten krok zaczynamy od &lt;a href=&quot;https://github.com/womanonrails/poker/blob/46e12428d0d67cb90d17f417147dc936815a69e7/lib/poker/hand.rb&quot; title=&quot;Siódmy krok refaktoringu&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;kodu&lt;/a&gt; i skupimy się na czytelności tej metody:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;check&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;straight_flush?&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;four_of_a_kind?&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;full_house?&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flush?&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;straight?&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;three_of_a_kind?&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;two_pair?&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;one_pair?&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;high_card?&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Muszę przyznać, że to dość ważny krok. Kiedy myślimy o czytelności kodu o wiele łatwiej zrozumieć nam tekst &lt;code&gt;:straight_flush&lt;/code&gt; niż zwykłą liczbę &lt;code&gt;9&lt;/code&gt;. W przypadku tekstu nie musisz głęboko wchodzić w szczegóły implementacji kodu by wiedzieć, co on będzie robił. Z drugiej strony, podeszłam do tej zmiany dość egoistycznie. Myślałam tylko o tej klasie bez zastanowienia nad konsekwencjami dla całego systemu. Zmieniłam to, co zwraca metoda &lt;code&gt;check&lt;/code&gt;. W niektórych przypadkach taka zmiana może być bardzo trudna do wprowadzenia lub nawet niemożliwa, przy bieżącym stanie kodu. W moim przypadku zmiana ta wymagała poprawy wszystkich testów. Dlatego musisz być ostrożna i świadoma przy wprowadzaniu takich zmian. W każdym razie, uważam że w moim przypadku zmiana była warta zachodu.&lt;/p&gt;

&lt;p&gt;Kod po zmianie:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;check&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:straight_flush&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;straight_flush?&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:four_of_a_kind&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;four_of_a_kind?&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:full_house&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;full_house?&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:flush&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flush?&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:straight&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;straight?&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:three_of_a_kind&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;three_of_a_kind?&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:two_pair&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;two_pair?&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:one_pair&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;one_pair?&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:high_card&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;high_card?&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:none&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Nową wersję kodu możesz znaleźć &lt;a href=&quot;https://github.com/womanonrails/poker/blob/4896498a348db52d5c884a522a132eae5b2c4f60/lib/poker/hand.rb&quot; title=&quot;Ósmy krok refaktoringu&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;tutaj&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Statystyki:&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;LOC&lt;/strong&gt;  - 80&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;LOT&lt;/strong&gt;  - 190&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Flog&lt;/strong&gt; - 62.5&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Flay&lt;/strong&gt; - 0&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Tests&lt;/strong&gt; - 104 examples, 0 failures&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;Krok 9 - Meta-programowanie&lt;/h1&gt;

&lt;p&gt;Ten krok jest całkowicie opcjonalny. Zrobiłam go ponieważ nie podobał mi się wygląd metody &lt;code&gt;check&lt;/code&gt; i te powtórzenia wewnątrz. Uważam, że po tej zmianie kod jest dalej czytelny, ale za to krótszy. Niestety nie zawsze tak jest. Czasem meta-programowanie bardzo pogarsza czytelność kodu. Dlatego zawsze jako programistka Ty jesteś odpowiedzialna za swój kod i to Ty musisz wybrać rozwiązanie, które Twoim zadaniem jest lepsze. W moim przypadku stworzyłam tablicę z poprawną kolejnością sprawdzania ręki pokerowej i użyłam jej w metodzie &lt;code&gt;check&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Kod przed zmianą:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;check&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:straight_flush&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;straight_flush?&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:four_of_a_kind&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;four_of_a_kind?&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:full_house&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;full_house?&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:flush&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flush?&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:straight&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;straight?&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:three_of_a_kind&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;three_of_a_kind?&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:two_pair&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;two_pair?&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:one_pair&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;one_pair?&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:high_card&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;high_card?&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:none&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Kod po zmianie:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;check&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@order_checking&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;method_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;?&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_sym&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;method_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;gdzie &lt;code&gt;@order_checking&lt;/code&gt; to tablica ustawień ręki w pokerze.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;@order_checking = [
  :straight_flush, :four_of_a_kind, :full_house, :flush, :straight,
  :three_of_a_kind, :two_pair, :one_pair, :high_card, :none
]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Cały kod możesz znaleźć &lt;a href=&quot;https://github.com/womanonrails/poker/blob/4d649a25af020c7f862b3c6ed964f1b2e73a0f60/lib/poker/hand.rb&quot; title=&quot;Dziewiąty krok refaktoringu&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;tutaj&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Statystyki&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;LOC&lt;/strong&gt;  - 82&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;LOT&lt;/strong&gt;  - 190&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Flog&lt;/strong&gt; - 59.3&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Flay&lt;/strong&gt; - 0&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Tests&lt;/strong&gt; - 104 examples, 0 failures&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;Krok 10 - Małe obiekty&lt;/h1&gt;

&lt;p&gt;Ten krok był dość duży ale również ważny. Może nawet najważniejszy. Zaczęłam od zasad &lt;strong&gt;SOLID&lt;/strong&gt;. Jeśli nie słyszałaś o tych zasadach lub chciałabyś szybko odświeżyć sobie pamięć, to zajrzyj na &lt;a href=&quot;https://pl.wikipedia.org/wiki/SOLID_(programowanie_obiektowe)&quot; title=&quot;SOLID (programowanie obiektowe)&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;stronę Wiki&lt;/a&gt;. Polecam też prezentację &lt;a href=&quot;https://www.youtube.com/watch?v=v-2yFMzxqwU&quot; title=&quot;Sandy Metz - SOLID Object-Oriented Design&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Sandy Metz - SOLID Object-Oriented Design&lt;/a&gt;. Zaczęłam od &lt;strong&gt;S - Single responsibility principle&lt;/strong&gt; - zasady pojedynczej odpowiedzialności. Kiedy popatrzysz na kod klasy &lt;code&gt;Hand&lt;/code&gt;, stwierdzisz, że ta klasa wie i robi wszystko. Tak jak już mówiłam w poprzednim artykule ten kod jest bardziej proceduralny niż obiektowy. Zaczęłam, więc wyciągać funkcjonalności jedna po drugiej. Każdy etap był dość podobny do poprzedniego, dlatego pokażę go na jednym przykładzie. Na przykładnie metody &lt;code&gt;four_of_a_kind&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Przeniosłam logikę metody &lt;code&gt;four_of_a_kind&lt;/code&gt; do osobnej klasy. Tak, to wytworzy w kodzie pewne powtórzenia, ale jak mówi Sandi &lt;em&gt;duplication is better than a wrong abstraction&lt;/em&gt; (powtórzenia są lepsze od złej abstrakcji).&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Poker&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FourOfAKind&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@array&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sort&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@figures&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@colors&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cards_figures_and_colors&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@frequency&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cards_frequency&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;values&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;check&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;:four_of_a_kind&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@frequency&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;include?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;kp&quot;&gt;private&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cards_figures_and_colors&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transpose&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cards_frequency&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@figures&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;each_with_object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Hash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Tworzę a w późniejszych krokach modyfikuję brzydko wyglądający warunek &lt;code&gt;if&lt;/code&gt; w klasie &lt;code&gt;Hand&lt;/code&gt; tak by obsłużył on nowy kod.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;check&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@order_checking&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:four_of_a_kind&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;FourOfAKind&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;check&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;method_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;?&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_sym&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;method_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Przygotowuję testy dla nowej klasy. Tak, powieliłam już istniejące testy dla metody &lt;code&gt;check&lt;/code&gt; w tej nowej klasie. Na tą chwilę musi to tak zostać.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;spec_helper&amp;#39;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Poker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;FourOfAKind&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;14&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;17&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;19&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;22&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;23&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shuffle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;26&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;27&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shuffle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;28&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;29&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shuffle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;33&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;34&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;35&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shuffle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;36&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;37&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;38&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;39&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shuffle&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cards&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;detects four_of_a_kind for &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cards&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;hand&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;described_class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cards&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hand&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;check&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eq&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:four_of_a_kind&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Podczas tego procesu zrobiłam jeszcze jedną rzecz. Wstrzyknęłam kolejność sprawdzania ręki pokerowej do inicjalizera klasy &lt;code&gt;Hand&lt;/code&gt;. &lt;code&gt;ORDER_CHECKING&lt;/code&gt; to stała, którą można traktować jako konfigurację i wyciągnąć do osobnego pliku jeżeli zajdzie taka potrzeba. Zrobiłam to na wypadek gdybym chciała szybko zmienić kolejność sprawdzania tego, co gracz ma w ręce w testach lub w aplikacji.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;order_checking&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ORDER_CHECKING&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Kod dla tego etapu znajdziesz &lt;a href=&quot;https://github.com/womanonrails/poker/tree/0c5d6850d40f899d98ff531e4a2b948d469c3d84/lib/poker&quot; title=&quot;Dziesiąty krok refaktoringu&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;tutaj&lt;/a&gt;. Został on powtórzony przeze mnie dla każdej ręki pokerowej. Po każdej iteracji wszystkie testy przechodziły. Jeżeli chciałabyś zobaczyć jak to wygląda z większej perspektywy, to zajrzyj &lt;a href=&quot;https://github.com/womanonrails/poker/tree/08631288c747a2a9fda3d986f4046e9e363ea027/lib/poker&quot; title=&quot;3 klasy stworzone na bazie powyższych kroków&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;tutaj&lt;/a&gt;. W tym miejscu istnieją już 3 klasy stworzone na bazie powyższych kroków.&lt;/p&gt;

&lt;h2&gt;Statystyki&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;LOC&lt;/strong&gt;  - 85&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;LOT&lt;/strong&gt;  - 200&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Flog&lt;/strong&gt; - 65.5&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Flay&lt;/strong&gt; - 0&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Tests&lt;/strong&gt; - 116 examples, 0 failures&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;Krok 11 - Usuwanie powieleń&lt;/h1&gt;

&lt;p&gt;W tym kroku zajęłam się usuwaniem analogii w kodzie. A muszę przyznać, że było tego dość sporo. Za każdym razem przy tworzeniu nowej klasy zmieniałam tylko dwie rzeczy: nazwę klasy i jedną linię w metodzie &lt;code&gt;check&lt;/code&gt;. By pozbyć się tego powielenia, musiałam wydzielić jakieś zachowanie, może metodę lub nawet klasę, która zajmie się pewnego rodzaju sortowaniem kart i będzie miała wiedzę na temat kolorów i figur. Zdecydowałam, że stworzę normalizację kart. Dzięki temu powstała klasa &lt;code&gt;CardsNormalization&lt;/code&gt;, która jest pewnego rodzaju reprezentacją dość ogólnej klasy &lt;code&gt;Normalization&lt;/code&gt;. Możesz zapytać mnie dlaczego stworzyłam 2 klasy, kiedy potrzebuje tylko jedną? No cóż, mam przeczucie, że tworzę mały interfejs, który będzie miał wiele różnych reprezentacji. Na tą chwilę istnieje tylko jedna reprezentacja, ale kto wie, co będzie w przyszłości? Przykładem innej reprezentacji (innej normalizacji) jest gra w kości. Zasady są bardzo podobne, ale normalizacja wprowadzanych danych będzie wyglądać inaczej. Kod tych dwóch nowych klas znajdziesz &lt;a href=&quot;https://github.com/womanonrails/poker/tree/a668a538cb86dd17e946157c5d62373fe2266c0e/lib&quot; title=&quot;Jedenasty krok refaktoringu&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;tutaj&lt;/a&gt;. Kod który był powielony w nowych klasach znalazł się w klasie &lt;code&gt;Normalization&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Normalization&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;attr_reader&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:figures&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:colors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:figures_frequency&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@array&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sort&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@figures&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prepare_figures&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@colors&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prepare_colors&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@figures_frequency&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prepare_figures_frequency&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;values&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;private&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;prepare_colors&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@array&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;prepare_figures&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@array&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;prepare_figures_frequency&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@figures&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;each_with_object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Hash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;a tutaj klasa &lt;code&gt;CardsNormalization&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CardsNormalization&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Normalization&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;private&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;prepare_colors&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;prepare_figures&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Podczas tego kroku zrobiłam jeszcze jedną rzecz. Wstrzyknęłam normalizację jako argument do inicjalizera klasy &lt;code&gt;Hand&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;order_checking&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ORDER_CHECKING&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;normalization&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CardsNormalization&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Po tych wszystkich zmianach moja klasa &lt;code&gt;OnePair&lt;/code&gt; wygląda następująco:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Poker&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OnePair&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;normalization&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Normalization&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@normalize_array&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;normalization&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;check&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;:one_pair&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@normalize_array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;figures_frequency&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;include?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Tylko jedna metoda wygląda okropnie. To metoda &lt;code&gt;check&lt;/code&gt;. Posiada ona teraz wiele warunków. Wiem jednak, że jest to stan przejściowy. Zajmę się tą metodą, jak tylko zakończę wyciąganie kolejnych funkcjonalności z klasy &lt;code&gt;Hand&lt;/code&gt;. Na tą chwilę metoda ta wygląda tak:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;check&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@order_checking&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:one_pair&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;include?&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;class_name&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Poker::&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;_&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:capitalize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;const_get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;class_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@normalization&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;check&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:four_of_a_kind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:three_of_a_kind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:one_pair&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;include?&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;class_name&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Poker::&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;_&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:capitalize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;const_get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;class_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;check&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;method_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;?&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_sym&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;method_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Następnie, powtórzyłam to samo rozumowanie dla reszty istniejących klas. Użyłam &lt;code&gt;CardsNormalization&lt;/code&gt; dla &lt;code&gt;FourOfAKind&lt;/code&gt; i &lt;code&gt;ThreeOfAKind&lt;/code&gt;. Kod znajdziesz &lt;a href=&quot;https://github.com/womanonrails/poker/tree/87891306fe875bd415554a6eb5ebc0b46f893c9d/lib/poker&quot; title=&quot;Kod po jedenastym kroku refaktoringu&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;tutaj&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Statystyki:&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;LOC&lt;/strong&gt;  - 87&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;LOT&lt;/strong&gt;  - 200&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Flog&lt;/strong&gt; - 82.5&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Flog total&lt;/strong&gt; - 122.4&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Flay&lt;/strong&gt; - 0&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Tests&lt;/strong&gt; - 124 examples, 0 failures&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;Krok 12 - Usunięcie kolejnych powtórzeń&lt;/h1&gt;

&lt;p&gt;Tym razem skupiłam się na innych powtórzeniach w nowych klasach. W kilku miejscach sprawdzam podobny warunek: &lt;code&gt;@normalize_array.figures_frequency.include?(4)&lt;/code&gt; zmienia się tylko liczba. Jest to dla mnie pewnego rodzaju &lt;em&gt;zasada&lt;/em&gt;. Sprawdzamy czy w kartach mamy 2, 3, lub 4 te same figury. Zdecydowałam, że stworzę klasę &lt;code&gt;FrequencyRule&lt;/code&gt; a tak wygląda jej kod:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Rules&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FrequencyRule&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;frequency_array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@frequency_array&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;frequency_array&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;check?&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@frequency_array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;include?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;następnie dodałam &lt;code&gt;@rule = Rules::FrequencyRule.new(@normalize_array.figures_frequency, 3)&lt;/code&gt; do inicjalizera i użyłam metody &lt;code&gt;@rule.check?&lt;/code&gt; zamiast &lt;code&gt;@normalize_array.figures_frequency.include?(3)&lt;/code&gt;. Tak wygląda klasa &lt;code&gt;ThreeOfAKind&lt;/code&gt; po tej zmianie:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ThreeOfAKind&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;normalization&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Normalization&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@normalize_array&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;normalization&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@rule&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Rules&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;FrequencyRule&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@normalize_array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;figures_frequency&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;check&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;:three_of_a_kind&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@rule&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;check?&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Cały kod wygląda &lt;a href=&quot;https://github.com/womanonrails/poker/tree/d66590842ef194a9218dea70ccd083212b5d43b2/lib&quot; title=&quot;Dwunasty krok refaktoringu&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;tak&lt;/a&gt;. Po tej zmianie i napisaniu nowych testów, wszystkie nowe i stare testy przechodzą.&lt;/p&gt;

&lt;h2&gt;Statystyki&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;LOC&lt;/strong&gt;  - 87&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;LOT&lt;/strong&gt;  - 161&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Flog&lt;/strong&gt; - 82.5&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Flog total&lt;/strong&gt; - 134.9&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Flay&lt;/strong&gt; - 0&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Tests&lt;/strong&gt; - 95 examples, 0 failures&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;Krok 13 - Łączenie wielu zasad&lt;/h1&gt;

&lt;p&gt;Teraz interesująca sprawa. Czas na fula. W tym przypadku potrzebujemy sprawdzić czy mamy 3 i 2 te same figury w tym samym czasie. Tak jak tutaj: 2&amp;#9824; 2&amp;#9827; &lt;span class='red-text'&gt;2&amp;#9829; 3&amp;#9829; 3&amp;#9830;&lt;/span&gt;. Musimy więc sprawdzić tą samą zasadę dla dwóch i trzech tych samych figur. To dobry czas by stworzyć klasę, która będzie łączyć wiele różnych zasad. Nazwałam ją &lt;code&gt;RulesFactory&lt;/code&gt;. Kod wygląda następująco:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RulesFactory&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rules&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@rules&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rules&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;check?&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@rules&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rule&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rule&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;check?&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A tak wygląda kod klasy &lt;code&gt;FullHouse&lt;/code&gt; (karety):&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Poker&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FullHouse&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;normalization&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Normalization&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@normalize_array&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;normalization&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;rule1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Rules&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;FrequencyRule&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@normalize_array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;figures_frequency&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;rule2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Rules&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;FrequencyRule&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@normalize_array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;figures_frequency&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@rules&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;RulesFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rule1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rule2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;check&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;:full_house&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@rules&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;check?&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Widzisz schemat? Oczywiście, trzeba jeszcze zrobić parę ulepszeń w klasie &lt;code&gt;Hand&lt;/code&gt;. Dopisać nowe testy i sprawdzić czy przechodzą. Cały kod jest dostępny &lt;a href=&quot;https://github.com/womanonrails/poker/tree/d18cf1f273c9fdcb97e21067d3411938beefdf36/lib&quot; title=&quot;Trzynasty krok refaktoringu&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;tutaj&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;Krok 14 - Powtarzanie kroków&lt;/h1&gt;

&lt;p&gt;Nadszedł czas by powtórzyć krok, który już wcześniej opisałam. Tworzymy nowe zasady: &lt;code&gt;StraightnessRule&lt;/code&gt;, &lt;code&gt;FlushnessRule&lt;/code&gt; i &lt;code&gt;RoyalnessRule&lt;/code&gt;. Tworzymy nowe klasy: &lt;code&gt;Straight&lt;/code&gt;, &lt;code&gt;Flush&lt;/code&gt; i &lt;code&gt;RoyalFlush&lt;/code&gt;. Kod po tej zmianie znajduje się &lt;a href=&quot;https://github.com/womanonrails/poker/tree/0985c071c87de56c8c49307d6d20963aced7ff79/lib&quot; title=&quot;Czternasty krok refaktoringu&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;tutaj&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Chciałabym wspomnieć o jednej magicznej sprawie. Kiedy zaczęłam tworzyć małe klasy z pojedyńczymi odpowiedzialnościami, klasy te stały się w dość proste. Dzięki temu można używać ich w nieoczekiwany sposób. Oto przykład:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Rules&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FlushnessRule&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;color_array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@color_array&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;color_array&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;check?&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@color_array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uniq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To co klasa powinna robić:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;rule&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;FlushnessRule&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#&amp;lt;FlushnessRule:0x00000001eced60 @color_array=[1, 1]&amp;gt;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;rule&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;check?&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to co może robić:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;rule&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;FlushnessRule&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;#fff&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;#fff&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#&amp;lt;FlushnessRule:0x00000001ebc020 @color_array=[&amp;quot;#fff&amp;quot;, &amp;quot;#fff&amp;quot;]&amp;gt;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;rule&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;check?&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Kiedy tworzyłam tą klasę nie przypuszczałam, że będę mogła ją wykorzystać w taki sposób. Nie myślałam, że będzie się ona nadawać do obsługi zarówno tablic jak i ciągów znaków. Wiem, że to poniekąd jest to zasługa samego języka Ruby i jego &lt;a href=&quot;https://pl.wikipedia.org/wiki/Duck_typing&quot; title=&quot;Duck typing in Ruby&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;&lt;strong&gt;duck typing&amp;#39;u&lt;/strong&gt;&lt;/a&gt; ale myślę, że też prostoty kodu.&lt;/p&gt;

&lt;h2&gt;Statystyki:&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;LOC&lt;/strong&gt;  - 94&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;LOT&lt;/strong&gt;  - 171&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Flog&lt;/strong&gt; - 69.7&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Flog total&lt;/strong&gt; - 191.2&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Flay&lt;/strong&gt; - 0&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Tests&lt;/strong&gt; - 142 examples, 0 failures&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;Krok 15 - Zasada dla Niczego&lt;/h1&gt;

&lt;p&gt;Kiedy grasz w pokera możesz mieć w ręce jedno z punktowanych ustawień figur lub po prostu nic. To &amp;quot;nic&amp;quot; trzeba obsłużyć w kodzie. Stworzyłam więc klasę dla &amp;quot;niczego&amp;quot; - &lt;code&gt;None&lt;/code&gt;. Dodatkowo zrobiłam też trochę porządków w klasie &lt;code&gt;Hand&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Poker&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;None&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;normalization&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Normalization&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@normalize_array&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;normalization&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;check&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;:none&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Cały kod związany z tym krokiem znajdziesz &lt;a href=&quot;https://github.com/womanonrails/poker/tree/03a356a42afed39fffd98ceff0b7b1311f7b05ec/lib&quot; title=&quot;Piętnasty krok refaktoringu&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;tutaj&lt;/a&gt;. Jak zawsze wszystkie testy po tym kroku przechodzą.&lt;/p&gt;

&lt;h2&gt;Statystyki&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;LOC&lt;/strong&gt;  - 55&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;LOT&lt;/strong&gt;  - 171&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Flog&lt;/strong&gt; - 56.0&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Flog total&lt;/strong&gt; - 180.8&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Flay&lt;/strong&gt; - 0&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Tests&lt;/strong&gt; - 145 examples, 0 failures&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;Krok 16 - MultiFrequencyRule&lt;/h1&gt;

&lt;p&gt;To będzie nasz ostatni krok. Możesz wierzyć lub nie ale najtrudniejsza do sprawdzenia zasada to dwie pary. Do tej pory stworzyłyśmy zasadę do sprawdzania liczby tych samych figur w ręce - &lt;code&gt;FrequencyRule&lt;/code&gt;. Ta zasada jednak tu nie zadziała, ponieważ chcemy sprawdzić czy mamy 2 pary. Musimy więc stworzyć inną zasadę, inną logikę. Postanowiłam nazwać ją &lt;code&gt;MultiFrequencyRule&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Rules&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MultiFrequencyRule&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;frequency_array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;times&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@frequency_array&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;frequency_array&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@times&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;times&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;check?&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;selected_frequency&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@frequency_array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reject&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@count&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;selected_frequency&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@times&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Tym razem sprawdzamy tylko wybraną liczbę wystąpień w &lt;code&gt;@frequency_array&lt;/code&gt;. Ile razy ona pojawia się w tej tablicy. Chwila! Jeżeli mamy taką kombinację kart 2&amp;#9824; 2&amp;#9827; &lt;span class='red-text'&gt;2&amp;#9829; 3&amp;#9829; 3&amp;#9830;&lt;/span&gt; mamy w ręce fula ale również dwie pary. Zasada do sprawdzania czy mamy w naszej ręce dwie pary też powinna zwrócić &lt;code&gt;true&lt;/code&gt;. Dlatego też sprawdzamy warunek: &lt;code&gt;number &amp;lt; @count&lt;/code&gt; i usuwamy te elementy z tablicy. Kod dla tego kroku znajdziesz &lt;a href=&quot;https://github.com/womanonrails/poker/blob/6a3af1c900c88477097ac00d405fef59866eb06b/lib/rules/multi_frequency_rule.rb&quot; title=&quot;Kod klasy MultiFrequencyRule&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;tutaj&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Uwaga!&lt;/strong&gt; Jeżeli przyjrzysz się bliżej, to zauważysz, że ten kod ma pewien problem. Przy ustawieniu 2&amp;#9824; 2&amp;#9827; &lt;span class='red-text'&gt;2&amp;#9829; 2&amp;#9830; 3&amp;#9829;&lt;/span&gt; też mamy dwie pary. Zmodyfikujmy naszą metodę &lt;code&gt;check?&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;check?&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;selected_frequency&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@frequency_array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@count&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;selected_frequency&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@times&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Nareszcie możemy całkowicie wyczyścić logikę klasy &lt;code&gt;Hand&lt;/code&gt;. Możemy też zastąpić klasę &lt;code&gt;FrequencyRule&lt;/code&gt;, klasą &lt;code&gt;MultiFrequencyRule&lt;/code&gt;, która jest bardziej ogólna. Kod znajdziesz &lt;a href=&quot;https://github.com/womanonrails/poker/tree/277d2893ffac1318c2a64fca2704e1c8258856e1/lib&quot; title=&quot;Szesnasty krok refaktoringu&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;tutaj&lt;/a&gt;. Sprawdźmy jak wygląda teraz nasza klasa &lt;code&gt;Hand&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Poker&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;ORDER_CHECKING&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;:royal_flush&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:straight_flush&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:four_of_a_kind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:full_house&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:flush&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;:straight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:three_of_a_kind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:two_pair&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:one_pair&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:high_card&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:none&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;freeze&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;# Poker hand&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Hand&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;order_checking&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ORDER_CHECKING&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;normalization&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CardsNormalization&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@array&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sort&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@order_checking&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;order_checking&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@normalization&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;normalization&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;check&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@order_checking&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;class_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;check&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;kp&quot;&gt;private&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;class_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;class_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Poker::&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;_&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:capitalize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;const_get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;class_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@normalization&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Jestem dumna z tej klasy. Jeżeli chciałabyś porównać tą klasę z początkową implementacją zajrzyj &lt;a href=&quot;https://github.com/womanonrails/poker/blob/55c9ae0ab921f7aa95bb7e47676d87b970a32033/lib/poker/hand.rb&quot; title=&quot;Pierwsza wersja kodu klasy Poker&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;tutaj&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Statystyki końcowe:&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;LOC&lt;/strong&gt;  - 37&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;LOT&lt;/strong&gt;  - 173&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Flog&lt;/strong&gt; - 28.0&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Flog total&lt;/strong&gt; - 182.4&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Flay&lt;/strong&gt; - 0&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Tests&lt;/strong&gt; - 145 examples, 0 failures&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;Podsumowanie&lt;/h1&gt;

&lt;p&gt;Podsumuję teraz to co udało nam się osiągnąć:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Użyłyśmy bardziej opisowych nazw w kodzie.&lt;/li&gt;
&lt;li&gt;Uprościłyśmy kod używając odrobiny meta-programowania.&lt;/li&gt;
&lt;li&gt;Stworzyłyśmy małe obiekty z małą odpowiedzialnością (wiedzą).&lt;/li&gt;
&lt;li&gt;Przygotowałyśmy całe zaplecze klas sprawdzających zasady pokera.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;Co dalej?&lt;/h1&gt;

&lt;p&gt;Myślisz, że to już koniec refaktoringu? Ja myślę o tym w zupełnie inny sposób. Moim zadaniem refaktoring nigdy się nie kończy. To nie znaczy, że trzeba go robić w nieskończoność. Zawsze będzie coś do zmiany, do ulepszenia. Z czasem mamy więcej informacji o tym jaką logikę kod ma reprezentować. Wiemy dokładnie, co się stanie. Na bazie tej wiedzy możemy podejmować kolejne kroki dotyczące naszej architektury.&lt;/p&gt;

&lt;p&gt;Kiedy teraz patrzę na ten kod, zmieniłabym go. Zaczęłabym od powtórzeń, które jeszcze widzę w istniejących klasach. Pewnie zauważyłaś też, że część tych klas jest dość generyczna i wyglądają dość podobnie. W następnym etapie usunęłabym te klasy i stworzyłabym jedną klasę, która pobierałaby nazwę i logikę potrzebnej zasady. Później zrobiłabym porządek w testach. Może wyciągnęłabym konfigurację z klasy &lt;code&gt;Hand&lt;/code&gt; do jakiegoś osobnego pliku np. &lt;code&gt;.yml&lt;/code&gt;. A może to konfiguracja mogłaby przygotowywać kod związany z zasadami? Czy to za dużo refaktoringu dla tak małej funkcjonalności? Pewnie tak, jest to tylko przykład co można zrobić w prawdziwym kodzie by ułatwić jego rozumienie.&lt;/p&gt;

&lt;h1&gt;Czego się nauczyłam?&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;małe, czytelne i proste do testowania klasy wiele ułatwiają&lt;/li&gt;
&lt;li&gt;przy małych klasach, kod staje się bardziej elastyczny (Mogę używać kodu w różny, czasem nieoczekiwany, sposób)&lt;/li&gt;
&lt;li&gt;mniej zależności, w łatwy sposób możemy usuwać i dodawać nowe zasady&lt;/li&gt;
&lt;li&gt;jesteśmy otwarci na rozszerzanie kodu - nie musimy modyfikować istniejącego kodu by dodać nową logikę, wystarczy stworzyć nową klasę i przygotować odpowiednią konfigurację. Możemy też pomyśleć o konwencji, która przygotuje konfigurację za nas. Wtedy wszystko działałoby automatycznie.&lt;/li&gt;
&lt;li&gt;To była czysta zabawa!&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;Moje zasady na refaktoring&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;po każdym kroku refaktoringu testy muszą przechodzić&lt;/li&gt;
&lt;li&gt;zacznij od detali a później przejdź do bardziej ogólnego spojrzenia&lt;/li&gt;
&lt;li&gt;nie zmieniaj wszystkiego naraz&lt;/li&gt;
&lt;li&gt;kod powinien być napisany tak, by nie potrzebował komentarzy, powinien być samo-komentujący się (są przypadki gdy warto umieścić komentarz w kodzie, ale nieczytelny kod nie powinien być do tego wymówką)&lt;/li&gt;
&lt;li&gt;narzędzia takie jak Rubocop lub Reek są po to, by pomóc; nie wiedzą jednak wszystkiego&lt;/li&gt;
&lt;li&gt;staraj się zapobiegać powtórzeniom w kodzie, jednak pamiętaj, że lepiej zostawić kod powielony niż wyciągnąć złą abstrakcję (sprawdź prezentację Sandi Mezt w bibliografii)&lt;/li&gt;
&lt;li&gt;publiczny interfejs powinien być mały&lt;/li&gt;
&lt;li&gt;zawsze myśl o całym swoim systemie, jak duży wpływ na niego będzie miała Twoja zmiana?&lt;/li&gt;
&lt;li&gt;pamiętaj o zasadach takich jak &lt;strong&gt;SOLID&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;usuwaj powtórzenia w mądry sposób&lt;/li&gt;
&lt;li&gt;myśl ogólnie i zawsze pamiętaj o spojrzeniu całościowym&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;Na koniec&lt;/h1&gt;

&lt;p&gt;Chciałabym wspomnieć jeszcze o jednej rzeczy na koniec. Przy każdym kroku zamieszczałam statystyki (wyniki różnych metryk). Nie wiem czy zwróciłaś na to uwagę ale w trakcie trwania refaktoringu te statystyki były gorsze niż na początku. Nigdy nie rezygnuj z refaktoringu z tego powodu. Jeżeli masz dobrą intuicję i plan gdzie chcesz być na jego końcu, krok po kroku kontynuuj swoją podróż a zobaczysz efekty.&lt;/p&gt;

&lt;p&gt;To wszystko. W tym artykule zamieściłam kilka pomysłów na refaktoring. Możesz ich używać całkowicie niezależenie. Kroki mogą być wykonywane w innej kolejności (nie wszystkie, ale część z pewnością). Nie musisz też wykorzystywać ich wszystkich. Jeżeli podobał Ci się ten artykuł, podziel się swoimi przemyśleniami poniżej w komentarzach. Do zobaczenia następnym razem!&lt;/p&gt;

&lt;p&gt;&lt;hr&gt;&lt;/p&gt;

&lt;h3&gt;Bibliografia&lt;/h3&gt;

&lt;h4&gt;Książki&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://helion.pl/view/10301k/refukv.htm#format/d&quot; title=&quot;Refaktoryzacja. Ulepszanie struktury istniejącego kodu&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Refaktoryzacja. Ulepszanie struktury istniejącego kodu - Martin Fowler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://helion.pl/view/10301k/czykov.htm#format/d&quot; title=&quot;Czysty kod. Podręcznik dobrego programisty&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Czysty kod. Podręcznik dobrego programisty - Robert C. Martin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://helion.pl/view/10301k/rubywz.htm#format/d&quot; title=&quot;Ruby. Wzorce projektowe&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Ruby. Wzorce projektowe - Russ Olsen&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://helion.pl/view/10301k/tddszt.htm#format/d&quot; title=&quot;Pragmatyczny programista. Od czeladnika do mistrza&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;TDD. Sztuka tworzenia dobrego kodu - Ken Beck&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://helion.pl/view/10301k/pragpv.htm#format/d&quot; title=&quot;Pragmatyczny programista. Od czeladnika do mistrza&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Pragmatyczny programista. Od czeladnika do mistrza - Andrew Hund, David Thomas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.amazon.com/Practical-Object-Oriented-Design-Ruby-Addison-Wesley/dp/0321721330&quot; title=&quot;Practical Object-Oriented Design in Ruby: An Agile Primer&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Practical Object-Oriented Design in Ruby: An Agile Primer - Sandi Metz [EN]&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;Prezentacje angielskojęzyczne&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=8bZh5LMaSmE&quot; title=&quot;All the Little Things by Sandi Metz&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;All the Little Things by Sandi Metz&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=5yX6ADjyqyE&quot; title=&quot;Fat Models with Patterns by Bryan Helmkamp&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;LA Ruby Conference 2013 Refactoring Fat Models with Patterns by Bryan Helmkamp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=OMPfEXIlTVE&quot; title=&quot;Nothing is something by Sandi Metz&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Nothing is something by Sandi Metz&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://infinum.co/the-capsized-eight/best-ruby-on-rails-refactoring-talks&quot; title=&quot;8 best Ruby on Rails refactoring talks&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Best Ruby on Rails refactoring talks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 25 Nov 2018 00:00:00 -0500</pubDate>
        <link>https://womanonrails.com/pl/refactoring-part2</link>
        <guid isPermaLink="true">https://womanonrails.com/pl/refactoring-part2</guid>
        
        <category>Ruby</category>
        
        
        <category>refaktoring</category>
        
      </item>
    
      
      <item>
        <title>Refaktoring w Ruby krok po kroku - część 1</title>
        <description>&lt;p&gt;Dużo czasu minęło od mojego ostatniego artykułu technicznego. Przez ten czas próbowałam wielu nowych rzeczy. Założyłam blog &lt;a href=&quot;https://bemore.womanonrails.com/&quot; title=&quot;Be More - moje przemyślenia na temat życia&quot; target=&quot;_blank&quot;&gt;Be more&lt;/a&gt;, który dotyczy moich przemyśleń na temat życia, &lt;a href=&quot;https://www.youtube.com/channel/UCudKRFuddrf8saaxUEoo0xQ&quot; title=&quot;Woman on Rails - kanał YouTube&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Kanał Woman on Rails na YouTube&lt;/a&gt; i &lt;a href=&quot;https://vimeo.com/womanonrails&quot; title=&quot;Woman on Rails - kanał Vimeo&quot; target=&quot;_blank&quot; rel=&quot;nonofollow noopener noreferrer&quot;&gt;podróżniczy kanał na Vimeo&lt;/a&gt;. To był czas odkrywania, co sprawia mi przyjemność a co nie. Ale wracając do tematu. Do tego artykułu przygotowywałam się naprawdę długo. Może nawet za długo. Pomysł pojawił się już 2015 roku, a teraz możesz zobaczyć jego rezultaty. Zaczynajmy!&lt;/p&gt;

&lt;p&gt;Refaktoring jest jednym z moich ulubionych tematów. Uwielbiam porządki w prawdziwym życiu, ale też w kodzie źródłowym. Pracowałam i nadal pracuję nad aplikacjami internetowymi. I wciąż poszukuje odpowiedzi na następujące pytania: Jak pisać dobry kod? Co powoduje, że po pewnym czasie nasz kod staje się brzydki i nieczytelny? Jak radzić sobie z rosnącą złożonością w projektach? Każdego dnia uczę się jak robić dobry refaktoring. Bazuję na zdobytym przeze mnie, jak i przez innych, doświadczeniu. Dziś chciałabym się podzielić z Tobą przykładem refaktoringu zrobionego krok po kroku.&lt;/p&gt;

&lt;p&gt;Do tego celu wykorzystam kod, który został napisany dawno temu przez młodego programistę w &lt;a href=&quot;https://fractalsoft.org/pl&quot; title=&quot;Fractal Soft - Aplikacje internetowe w Ruby on Rails&quot; target=&quot;_blank&quot;&gt;mojej firmie&lt;/a&gt;. Plan był następujący - ulepszyć ten kod źródłowy. W zasadzie cała logika to jedna klasa, którą możesz zobaczyć &lt;a href=&quot;https://github.com/womanonrails/poker/blob/55c9ae0ab921f7aa95bb7e47676d87b970a32033/lib/poker/hand.rb&quot; title=&quot;Kod przed refaktoringiem&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;tutaj&lt;/a&gt;. W tej klasie znajdują się wszystkie zasady potrzebne do sprawdzenia tego, co mamy w ręce grając w pokera, ale bez użycia jokera. Kod nie jest zły. Kiedy znasz logikę biznesową (w tym przypadku zasady pokera), jesteś wstanie poruszać się po tym kodzie. Ten fragment kodu posiada też testy, co jest jego zaletą. Będzie nam o wiele łatwiej zmienić cokolwiek, gdy mamy testy pilnujące logiki. Jeżeli jednak nie cała logika jest przetestowana, to możemy zepsuć fragment funkcjonalności nie zdając sobie nawet z tego sprawy. Kod ten wygląda bardziej proceduralnie niż obiektowo i będę chciała się tym zająć w odpowiednim czasie. Posiada on też wiele powtórzeń. Czasami taki fragment kodu jest w zupełności wystarczający. Wszystko zależy od projektu i wymagań. Jeżeli kod został napisany raz, działa poprawnie i nikt do niego nie będzie musiał zaglądać, to może zostawienie go w takim stanie jest w jakiś sposób uzasadnione z biznesowego punktu widzenia. Natomiast jeżeli zdarzy się, że zmienią się wymagania, to prawdopodobnie kod źródłowy też ulegnie zmianie. To Ty musisz zdecydować, czy będziesz refaktoryzowała kod teraz czy później. Ja preferuje pierwszą opcję. Dopóki pamiętam logikę i zależności łatwiej jest mi kod zmienić. Po pewnym czasie trzeba najpierw jeszcze raz zrozumieć strukturę, zanim zacznie się coś modyfikować. No to zaczynamy!&lt;/p&gt;

&lt;h1&gt;Krok 1 - Przygotowanie środowiska&lt;/h1&gt;

&lt;p&gt;Zaczęłam od zaktualizowania wszystkich gemów w projekcie oraz doinstalowania narzędzi takich jak Rubocop czy Reek. Są to &lt;strong&gt;metryki czyli pewnego rodzaju wskaźniki jakości kodu&lt;/strong&gt;. Pomogą nam sprawdzić na czym stoimy i gdzie można zacząć robić porządki. Trzeba jednak pamiętać, że są to tylko narzędzia. A narzędzia mogą się mylić i można je łatwo oszukać. Ale to temat na osobny artykuł.&lt;/p&gt;

&lt;h2&gt;Statystyki (bazując na metrykach):&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;LOC&lt;/strong&gt; (Line of code - liczba linii kodu) - 194&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;LOT&lt;/strong&gt; (Line of tests - liczba linii testów) - 168&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Flog&lt;/strong&gt; - 112.8&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Flay&lt;/strong&gt; - 123&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Testy&lt;/strong&gt; - 12 examples, 0 failures (12 przypadków testowych, 0 nieprzechodzących)&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;Krok 2 - Pierwsze porządki&lt;/h1&gt;

&lt;p&gt;Bazując na testach i metrykach, nie wchodząc w głębsze zrozumienie logiki, zrobiłam pierwsze usprawnienia. Usunęłam niektóre warunki i uprościłam kod.&lt;/p&gt;

&lt;p&gt;Kod przed zmianami:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;straight_flush?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;straight?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flush?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Kod po zmianach:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;straight_flush?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;straight?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flush?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Cały kod możesz znaleźć &lt;a href=&quot;https://github.com/womanonrails/poker/blob/148429e4591638aef38b5b7abaab5e0198d805c0/lib/poker/hand.rb&quot; title=&quot;Drugi krok refaktoringu&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;tutaj&lt;/a&gt;. Te zmiany moim zdaniem poprawiły odrobinę czytelność kodu.&lt;/p&gt;

&lt;p&gt;Po tym kroku, wszystkie testy przechodziły.&lt;/p&gt;

&lt;h1&gt;Krok 3 - Zrozumienie logiki i dalsze uproszczenia&lt;/h1&gt;

&lt;p&gt;Teraz gdy kod jest dla mnie bardziej przejrzysty, mogę przejść do właściwej zmiany logiki. Mam testy, więc każda zmiana będzie się na nich opierała. Cel polegała na ich spełnieniu, czyli sprawieniu, że testy przechodza. Wzięłam pierwszą metodę i usunęłam całe jej wnętrze. Oto co dostałam:&lt;/p&gt;

&lt;p&gt;Kod przed zmianą:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;one_pair?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clone&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;collect!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;#  (0..8).each do |elem|&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#    tmp.delete(elem)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#  end&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;helper_array&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;13&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;helper_array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;helper_array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;helper_array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;include?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Kod po zmianie:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;one_pair?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;hash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Hash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;include?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Dla każdej metody w tej klasie powtarzałam następujące kroki:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Brałam metodę i usuwałam jej zawartość&lt;/li&gt;
&lt;li&gt;Uruchamiałam testy (niektóre z nich przestały przechodzić) i na ich podstawie starałam się zrozumieć logikę&lt;/li&gt;
&lt;li&gt;Pisałam nowy kod w prostszy sposób&lt;/li&gt;
&lt;li&gt;Sprawdzałam czy wszystkie testy przechodzą&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Kod po moich zmianach możesz znaleźć &lt;a href=&quot;https://github.com/womanonrails/poker/blob/a0bb2f6ab99bf8d977c1b68a53774b2eef7a46ac/lib/poker/hand.rb&quot; title=&quot;Trzeci krok refaktoringu&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;tutaj&lt;/a&gt;. Podczas tego kroku usunęłam również zakomentowany kod, komentarze po polsku i dodałam kilka testów jednostkowych, których moim zdaniem brakowało.&lt;/p&gt;

&lt;h2&gt;Statystyki:&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;LOC&lt;/strong&gt; - 73&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;LOT&lt;/strong&gt; - 170&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Flog&lt;/strong&gt; - 76.3&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Flay&lt;/strong&gt; - 63&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Testy&lt;/strong&gt; - 12 examples, 0 failures&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;Krok 4 - Od kodu proceduralnego do obiektowego&lt;/h1&gt;

&lt;p&gt;Nie wiem czy to zauważyłaś, ale do każdej metody przekazujemy argument &lt;code&gt;array&lt;/code&gt;. Kod jest zamknięty w klasę, ale nie używamy tam inicjalizera (metody inicjującej instancję klasy). Poza tym mamy wiele miejsc, gdzie używamy &lt;code&gt;array.each {|item| hash [item / 4] += 1}&lt;/code&gt;. Zacznijmy od przeniesienia tego fragmentu do inicjalizera i użyjmy stanu obiektu do przechowania tej wartości, zamiast wyliczać ją wielokrotnie.&lt;/p&gt;

&lt;h4&gt;Szybkie wyjaśnienie:&lt;/h4&gt;

&lt;p&gt;Myślę, że to dobry moment aby wytłumaczyć choć odrobinę, jak ten kod działa. Każdą kartę z talii reprezentuje jedna liczba od 0 do 51. Tak więc liczby od 0-3 reprezentują dwójki we wszystkich kolorach, liczby 4-7 reprezentują trójki itd. Całość tej zależności przedstawiona jest w tabeli poniżej:&lt;/p&gt;

&lt;table class='table refactoring-step-by-step'&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;0 &lt;/td&gt; &lt;td&gt;2&amp;spades;&lt;/td&gt;
      &lt;td&gt;4 &lt;/td&gt; &lt;td&gt;3&amp;spades;&lt;/td&gt;
      &lt;td&gt;8 &lt;/td&gt; &lt;td&gt;4&amp;spades;&lt;/td&gt;
      &lt;td&gt;12&lt;/td&gt; &lt;td&gt;5&amp;spades;&lt;/td&gt;
      &lt;td&gt;16&lt;/td&gt; &lt;td&gt;6&amp;spades;&lt;/td&gt;
      &lt;td&gt;20&lt;/td&gt; &lt;td&gt;7&amp;spades;&lt;/td&gt;
      &lt;td&gt;24&lt;/td&gt; &lt;td&gt;8&amp;spades;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1 &lt;/td&gt; &lt;td&gt;2&amp;clubs;&lt;/td&gt;
      &lt;td&gt;5 &lt;/td&gt; &lt;td&gt;3&amp;clubs;&lt;/td&gt;
      &lt;td&gt;9 &lt;/td&gt; &lt;td&gt;4&amp;clubs;&lt;/td&gt;
      &lt;td&gt;13&lt;/td&gt; &lt;td&gt;5&amp;clubs;&lt;/td&gt;
      &lt;td&gt;17&lt;/td&gt; &lt;td&gt;6&amp;clubs;&lt;/td&gt;
      &lt;td&gt;21&lt;/td&gt; &lt;td&gt;7&amp;clubs;&lt;/td&gt;
      &lt;td&gt;25&lt;/td&gt; &lt;td&gt;8&amp;clubs;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr class='red-text'&gt;
      &lt;td&gt;2 &lt;/td&gt; &lt;td class='red'&gt;2&amp;hearts;&lt;/td&gt;
      &lt;td&gt;6 &lt;/td&gt; &lt;td class='red'&gt;3&amp;hearts;&lt;/td&gt;
      &lt;td&gt;10&lt;/td&gt; &lt;td class='red'&gt;4&amp;hearts;&lt;/td&gt;
      &lt;td&gt;14&lt;/td&gt; &lt;td class='red'&gt;5&amp;hearts;&lt;/td&gt;
      &lt;td&gt;18&lt;/td&gt; &lt;td class='red'&gt;6&amp;hearts;&lt;/td&gt;
      &lt;td&gt;22&lt;/td&gt; &lt;td class='red'&gt;7&amp;hearts;&lt;/td&gt;
      &lt;td&gt;26&lt;/td&gt; &lt;td class='red'&gt;8&amp;hearts;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr class='red-text'&gt;
      &lt;td&gt;3 &lt;/td&gt; &lt;td class='red'&gt;2&amp;diams;&lt;/td&gt;
      &lt;td&gt;7 &lt;/td&gt; &lt;td class='red'&gt;3&amp;diams;&lt;/td&gt;
      &lt;td&gt;11&lt;/td&gt; &lt;td class='red'&gt;4&amp;diams;&lt;/td&gt;
      &lt;td&gt;15&lt;/td&gt; &lt;td class='red'&gt;5&amp;diams;&lt;/td&gt;
      &lt;td&gt;19&lt;/td&gt; &lt;td class='red'&gt;6&amp;diams;&lt;/td&gt;
      &lt;td&gt;23&lt;/td&gt; &lt;td class='red'&gt;7&amp;diams;&lt;/td&gt;
      &lt;td&gt;27&lt;/td&gt; &lt;td class='red'&gt;8&amp;diams;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;table class='table refactoring-step-by-step'&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;28&lt;/td&gt; &lt;td&gt;9&amp;spades;&lt;/td&gt;
      &lt;td&gt;32&lt;/td&gt; &lt;td&gt;10&amp;spades;&lt;/td&gt;
      &lt;td&gt;36&lt;/td&gt; &lt;td&gt;J&amp;spades;&lt;/td&gt;
      &lt;td&gt;40&lt;/td&gt; &lt;td&gt;D&amp;spades;&lt;/td&gt;
      &lt;td&gt;44&lt;/td&gt; &lt;td&gt;K&amp;spades;&lt;/td&gt;
      &lt;td&gt;48&lt;/td&gt; &lt;td&gt;A&amp;spades;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;29&lt;/td&gt; &lt;td&gt;9&amp;clubs;&lt;/td&gt;
      &lt;td&gt;33&lt;/td&gt; &lt;td&gt;10&amp;clubs;&lt;/td&gt;
      &lt;td&gt;37&lt;/td&gt; &lt;td&gt;J&amp;clubs;&lt;/td&gt;
      &lt;td&gt;41&lt;/td&gt; &lt;td&gt;D&amp;clubs;&lt;/td&gt;
      &lt;td&gt;45&lt;/td&gt; &lt;td&gt;K&amp;clubs;&lt;/td&gt;
      &lt;td&gt;49&lt;/td&gt; &lt;td&gt;A&amp;clubs;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr class='red-text'&gt;
      &lt;td&gt;30&lt;/td&gt; &lt;td class='red'&gt;9&amp;hearts;&lt;/td&gt;
      &lt;td&gt;34&lt;/td&gt; &lt;td class='red'&gt;10&amp;hearts;&lt;/td&gt;
      &lt;td&gt;38&lt;/td&gt; &lt;td class='red'&gt;J&amp;hearts;&lt;/td&gt;
      &lt;td&gt;42&lt;/td&gt; &lt;td class='red'&gt;D&amp;hearts;&lt;/td&gt;
      &lt;td&gt;46&lt;/td&gt; &lt;td class='red'&gt;K&amp;hearts;&lt;/td&gt;
      &lt;td&gt;50&lt;/td&gt; &lt;td class='red'&gt;A&amp;hearts;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr class='red-text'&gt;
      &lt;td&gt;31&lt;/td&gt; &lt;td class='red'&gt;9&amp;diams;&lt;/td&gt;
      &lt;td&gt;35&lt;/td&gt; &lt;td class='red'&gt;10&amp;diams;&lt;/td&gt;
      &lt;td&gt;39&lt;/td&gt; &lt;td class='red'&gt;J&amp;diams;&lt;/td&gt;
      &lt;td&gt;43&lt;/td&gt; &lt;td class='red'&gt;D&amp;diams;&lt;/td&gt;
      &lt;td&gt;47&lt;/td&gt; &lt;td class='red'&gt;K&amp;diams;&lt;/td&gt;
      &lt;td&gt;52&lt;/td&gt; &lt;td class='red'&gt;A&amp;diams;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Jeżeli mamy kod &lt;code&gt;array.map {|item| item / 4}&lt;/code&gt; to tak naprawdę sprawdzamy jaką figurę od 2 do Asa reprezentuje liczba. Natomiast jeżeli mamy &lt;code&gt;array.map {|item| item % 4}&lt;/code&gt; sprawdzamy jakiego koloru jest dana karta (&amp;spades;, &amp;clubs;, &amp;hearts;, &amp;diams;).&lt;/p&gt;

&lt;p&gt;Gdybyś potrzebowała dokładniejszego wytłumaczenia zasad pokera, to sprawdź &lt;a href=&quot;https://en.wikipedia.org/wiki/List_of_poker_hands&quot; title=&quot;Pokerowe ustawienia ręki&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;listę wszystkich pokerowych ustawień ręki na Wikipedii&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Dodajemy inicjalizer:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@array&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sort&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@cards&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Przykład metody przed zmianą:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;three_of_a_kind?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;hash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Hash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;include?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Po zmianie:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;three_of_a_kind?&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;hash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Hash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@cards&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;include?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Usunęłam tutaj powtarzające się fragmenty kodu, używając stanu trzymanego w instancji klasy. Kod po tym kroku możesz znaleźć &lt;a href=&quot;https://github.com/womanonrails/poker/blob/83d230e969df4d27ffa5e5e34a2cf1aa43e76d90/lib/poker/hand.rb&quot; title=&quot;Czwarty krok refaktoringu&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;tutaj&lt;/a&gt;. Mała uwaga - dodatkowo zrobiłam refaktoring w testach. Postanowiłam przenieść wszystkie możliwe przypadki testowe do tablicy by uniknąć powtórzeń, jakie były widoczne również w testach.&lt;/p&gt;

&lt;h2&gt;Statystyki:&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;LOC&lt;/strong&gt; - 76&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;LOT&lt;/strong&gt; - 190&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Flog&lt;/strong&gt; - 70.9&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Flay&lt;/strong&gt; - 57&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Testy&lt;/strong&gt; - 104 examples, 0 failures&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;Krok 5 - Usuwanie powtórzeń (duplikacji)&lt;/h1&gt;

&lt;p&gt;Bazując na metryce Reek zauważyłam dużo powtórzeń w kodzie. Zdecydowałam, że jeszcze raz wykorzystam stan obiektu, by się ich pozbyć. Wszystkie zmiany związane z tym krokiem możesz znaleźć &lt;a href=&quot;https://github.com/womanonrails/poker/blob/74c05d7480e7857d1e99d604169f6eed46279758/lib/poker/hand.rb&quot; title=&quot;Piąty krok refaktoringu&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;tutaj&lt;/a&gt;. A poniżej zamieszczam skrót tego co zrobiłam:&lt;/p&gt;

&lt;p&gt;Zmiana w inicjalizerze:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@array&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sort&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@cards&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@frequency&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cards_frequency&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Dodanie nowej metody &lt;code&gt;cards_frequency&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cards_frequency&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;hash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Hash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@cards&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;values&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Przykład jednej metody przed zmianą:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;four_of_a_kind?&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;hash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Hash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@cards&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;include?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Po zmianie:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;four_of_a_kind?&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@frequency&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;include?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Statystyki:&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;LOC&lt;/strong&gt; - 76&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;LOT&lt;/strong&gt; - 190&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Flog&lt;/strong&gt; - 61.0&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Flay&lt;/strong&gt; - 0&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Testy&lt;/strong&gt; - 104 examples, 0 failures&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;Krok 6 - Mały publiczny interface&lt;/h1&gt;

&lt;p&gt;Kiedy spojrzysz na kod z &lt;a href=&quot;https://github.com/womanonrails/poker/blob/74c05d7480e7857d1e99d604169f6eed46279758/lib/poker/hand.rb&quot; title=&quot;Piąty krok refaktoringu&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;kroku 5&lt;/a&gt;, to na pewno zauważysz, że mamy bardzo dużo metod dostępnych publicznie do wykorzystania na obiekcie naszej klasy. &lt;strong&gt;Duży publiczny interface jest ciężki w utrzymaniu.&lt;/strong&gt; Jeżeli chciałybyśmy zastąpić naszą klasę &lt;code&gt;Hand&lt;/code&gt; inną klasą, to będziemy potrzebować dokładnie tyle samo metod publicznych, jak w przypadku klasy &lt;code&gt;Hand&lt;/code&gt;. Dodatkowo każda publicznie dostępna metoda może zostać wykorzystana przez inny fragment kodu, co może powodować niepotrzebne zależności między obiektami. W naszym przypadku, jak przyjrzymy się bliżej okaże się, że nawet testy nie sprawdzają wszystkich dostępnych metod. Zajmują się tylko sprawdzeniem metody &lt;code&gt;check&lt;/code&gt;. Zdecydowałam więc, że jedyną publicznie dostępną metodą będzie metoda &lt;code&gt;check&lt;/code&gt;. Pozostałe metody będą pomocniczymi metodami prywatnymi. Zmiany możesz zobaczyć &lt;a href=&quot;https://github.com/womanonrails/poker/blob/ef117a56e3cc0fbfae9de4821ac61e5489f704fc/lib/poker/hand.rb&quot; title=&quot;Szósty krok refaktoringu&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;tutaj&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Statystyki:&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;LOC&lt;/strong&gt; - 77&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;LOT&lt;/strong&gt; - 190&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Flog&lt;/strong&gt; - 59.9&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Flay&lt;/strong&gt; - 0&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Testy&lt;/strong&gt; - 104 examples, 0 failures&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;Krok 7 - Jeszcze więcej porządków&lt;/h1&gt;

&lt;p&gt;Ten krok jest podobny do kroku 5. Usuwam dodatkowe powtórzenia w kodzie i zmieniam nazwy na bardziej opisowe, by ułatwić późniejsze czytanie kodu. Stworzyłam nową metodę &lt;code&gt;cards_figures_and_colors&lt;/code&gt;, która przygotuje dwie rzeczy: &lt;code&gt;figures&lt;/code&gt; czyli figury i &lt;code&gt;colors&lt;/code&gt; czyli kolory kart. Możesz teraz powiedzieć: &lt;em&gt;a gdzie jest zasada &lt;strong&gt;pojedynczej odpowiedzialności&lt;/strong&gt;&lt;/em&gt; lub &lt;em&gt;&lt;strong&gt;to jest mikro optymalizacja&lt;/strong&gt;&lt;/em&gt;, ponieważ zamiast dwóch pętli masz tylko jedną. Moja intuicja podpowiada mi że to, co zrobiłam jest ok. Ale Ty możesz mieć inne zdanie i to też jest ok. Szanuję je. Oto jak wygląda ta metoda:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cards_figures_and_colors&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transpose&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Jestem otwarta na dyskusję, czy moje podejście jest dobre czy nie. Ta zmiana pociąga za sobą także zmiany w metodzie &lt;code&gt;initialize&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@array&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sort&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@figures&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@colors&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cards_figures_and_colors&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@frequency&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cards_frequency&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;values&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;W tym kroku postanowiłam zmienić również metodę &lt;code&gt;cards_frequency&lt;/code&gt;. Zamiast używać &lt;code&gt;each&lt;/code&gt; używam &lt;code&gt;each_with_object&lt;/code&gt;. Jeżeli jesteś zainteresowana większą ilością informacji na temat &lt;code&gt;each_with_object&lt;/code&gt; zachęcam Cię do przeczytania mojego artykułu o &lt;a href=&quot;https://womanonrails.com/pl/each-with-object&quot; title=&quot;Zastosowanie metody each_with_object w języku Ruby&quot;&gt;użyciu metody each_with_object w Ruby&lt;/a&gt;. Oto jak teraz wygląda kod:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cards_frequency&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@figures&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;each_with_object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Hash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Dzięki zmiennej &lt;code&gt;@colors&lt;/code&gt; mogę zmienić metodę &lt;code&gt;flush?&lt;/code&gt; z:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;flush?&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;color&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uniq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;na:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;flush?&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@colors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uniq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Wszystkie zmiany możesz zobaczyć &lt;a href=&quot;https://github.com/womanonrails/poker/blob/46e12428d0d67cb90d17f417147dc936815a69e7/lib/poker/hand.rb&quot; title=&quot;Siódmy krok refaktoringu&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;tutaj&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Statystyki:&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;LOC&lt;/strong&gt; - 80&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;LOT&lt;/strong&gt; - 190&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Flog&lt;/strong&gt; - 64.5&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Flay&lt;/strong&gt; - 0&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Testy&lt;/strong&gt; - 104 examples, 0 failures&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;Podsumowanie&lt;/h1&gt;

&lt;p&gt;Podsumujmy co do tej pory udało nam się osiągnąć:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Użyłyśmy metryk do pierwszych, wstępnych porządków&lt;/li&gt;
&lt;li&gt;Uprościłyśmy kod bazując na testach i zrozumieniu logiki&lt;/li&gt;
&lt;li&gt;Zmieniłyśmy kod proceduralny na obiektowy&lt;/li&gt;
&lt;li&gt;Usunęłyśmy powtórzenia w kodzie&lt;/li&gt;
&lt;li&gt;i stworzyłyśmy mały publiczny interface&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;W następnym artykule chciałabym wejść jeszcze głębiej w temat tego refaktoringu i skupić się na:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Bardziej opisowym kodzie&lt;/li&gt;
&lt;li&gt;Meta-programowaniu jako sposobie na pisanie elastycznego kodu&lt;/li&gt;
&lt;li&gt;Przygotowaniu małych niezależnych klas, zamiast jednej dużej klasy&lt;/li&gt;
&lt;li&gt;Budowaniu klas jako elementów wymiennych i takich, które można ze sobą łączyć&lt;/li&gt;
&lt;li&gt;Wyjaśnieniu po co podawałam metryki na każdym kroku i co one nam wlaściwie mówią&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Trzymaj się! Mój następny artykuł pojawi się już wkrótce! Jeżeli masz jakieś pytania lub przemyślenia, to podziel się nimi w komentarzach. Do zobaczenia następnym razem. Cześć!&lt;/p&gt;

&lt;p&gt;&lt;hr&gt;&lt;/p&gt;

&lt;h3&gt;Bibliografia&lt;/h3&gt;

&lt;h4&gt;Książki&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://helion.pl/view/10301k/refukv.htm#format/d&quot; title=&quot;Refaktoryzacja. Ulepszanie struktury istniejącego kodu&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Refaktoryzacja. Ulepszanie struktury istniejącego kodu - Martin Fowler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://helion.pl/view/10301k/czykov.htm#format/d&quot; title=&quot;Czysty kod. Podręcznik dobrego programisty&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Czysty kod. Podręcznik dobrego programisty - Robert C. Martin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://helion.pl/view/10301k/rubywz.htm#format/d&quot; title=&quot;Ruby. Wzorce projektowe&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Ruby. Wzorce projektowe - Russ Olsen&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://helion.pl/view/10301k/tddszt.htm#format/d&quot; title=&quot;Pragmatyczny programista. Od czeladnika do mistrza&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;TDD. Sztuka tworzenia dobrego kodu - Ken Beck&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://helion.pl/view/10301k/pragpv.htm#format/d&quot; title=&quot;Pragmatyczny programista. Od czeladnika do mistrza&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Pragmatyczny programista. Od czeladnika do mistrza - Andrew Hund, David Thomas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.amazon.com/Practical-Object-Oriented-Design-Ruby-Addison-Wesley/dp/0321721330&quot; title=&quot;Practical Object-Oriented Design in Ruby: An Agile Primer&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Practical Object-Oriented Design in Ruby: An Agile Primer - Sandi Metz [EN]&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;Prezentacje angielsko języczne&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=8bZh5LMaSmE&quot; title=&quot;All the Little Things by Sandi Metz&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;All the Little Things by Sandi Metz&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=5yX6ADjyqyE&quot; title=&quot;Fat Models with Patterns by Bryan Helmkamp&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;LA Ruby Conference 2013 Refactoring Fat Models with Patterns by Bryan Helmkamp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=OMPfEXIlTVE&quot; title=&quot;Nothing is something by Sandi Metz&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Nothing is something by Sandi Metz&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://infinum.co/the-capsized-eight/best-ruby-on-rails-refactoring-talks&quot; title=&quot;8 best Ruby on Rails refactoring talks&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Best Ruby on Rails refactoring talks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 08 Oct 2018 00:00:00 -0400</pubDate>
        <link>https://womanonrails.com/pl/refactoring-step-by-step</link>
        <guid isPermaLink="true">https://womanonrails.com/pl/refactoring-step-by-step</guid>
        
        <category>Ruby</category>
        
        
        <category>refaktoring</category>
        
      </item>
    
      
      <item>
        <title>Wroclove.rb 2018 - Krótkie podsumowanie</title>
        <description>&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;Ostatni raz uczestniczyłam w konferencji &lt;strong&gt;Wroclove.rb&lt;/strong&gt; około 2-3 lata temu. Było to wtedy dla mnie dość smutne doświadczenie. Prawie każda prezentacja mówiła o tym, co jest nie tak z &lt;strong&gt;Ruby&lt;/strong&gt; i &lt;strong&gt;Ruby on Rails&lt;/strong&gt;. Niestety wtedy nikt nie pokazywał rozwiązań dla postawionych problemów. Wiem, że te prezentacje miały być dla nas takim dzwonkiem alarmowym. Miały nam powiedzieć: &lt;em&gt;&amp;quot;Obudźcie się i zacznijcie działać!&amp;quot;&lt;/em&gt; Jednak wróciłam do domu po tamtej edycji dość przygnębiona.&lt;/p&gt;

&lt;p&gt;Tym razem było inaczej. Ludzie przyjechali z pomysłami, co możemy zrobić dalej. Jak możemy poprawić nasz kod pod względem architektury, tak by nawet duże projekty nie były problematyczne. Miło było posłuchać o nowych koncepcjach (przynajmniej dla świata Rails, bo języki takie jak Java czy C# już od jakiegoś czasu używają tych koncepcji). Nie mówię tutaj, że proponowane rozwiązania są idealne, ale dobrze jest zobaczyć zmianę w naszej społeczności. Poczuć pozytywną energię i zobaczyć tą chęć do działania.&lt;/p&gt;

&lt;p&gt;Przyjazd na Wroclove.rb był dla mnie miłym doświadczeniem pod jeszcze jednym względem. Cudownie było spotkać wszystkich moich starych znajomych, których tak rzadko widuje na co dzień. Konferencje takie, jak ta bardzo to ułatwiają. Poczułam się jakbym przyjechała na zjazd rodzinny. I za to chciałabym podziękować organizatorom.&lt;/p&gt;

&lt;p&gt;Jeżeli byłeś lub byłaś na konferencji, to zapraszam do obejrzenia mojego krótkiego filmu z tego wydarzenia. A jeżeli nie, mam nadzieję, że zainspiruje Cię on do dołączenia do nas w następnym roku. Zapraszam Cię również do dzielenia się swoimi przemyśleniami w komentarzach poniżej. Do zobaczenia następnym razem. Obiecuje, że już niedługo na blogu pojawi się bardziej techniczny temat.&lt;/p&gt;
</description>
        <pubDate>Fri, 25 May 2018 00:00:00 -0400</pubDate>
        <link>https://womanonrails.com/pl/wrocloverb-2018</link>
        <guid isPermaLink="true">https://womanonrails.com/pl/wrocloverb-2018</guid>
        
        <category>Wrocloverb</category>
        
        <category>Ruby</category>
        
        
        <category>konferencja</category>
        
      </item>
    
      
      <item>
        <title>Rozmowa kwalifikacyjna</title>
        <description>&lt;p&gt;Od jakiegoś czasu zajmuję się rozmowami kwalifikacyjnymi. Nie jestem osobą z HR. Jestem programistką. Moje zadanie, to sprawdzenie technicznych umiejętności kandydatów aplikujących do naszej firmy. Staram się dowiedzieć czy kandydatka lub kandydat pasuje do naszego zespołu technicznie, ale również pod względem osobowości i temperamentu. Podczas takiej rozmowy nie chodzi o bycie doskonałym. Raczej o bycie szczerym, bycie sobą. Celem jest sprawdzenie czy obie strony chcą podjąć współpracę. Zarówno kandydat jak i zespół powinni do siebie pasować. Dzisiaj chciałabym się podzielić z Wami elementami, na które ja zwracam uwagę podczas prowadzenia rozmowy kwalifikacyjnej.&lt;/p&gt;

&lt;p&gt;Najważniejszy jest dla mnie szacunek. Ponieważ szanuję czas innych ludzi, również tych, z którymi przeprowadzam rozmowę kwalifikacyjną, więc przygotowuje się do takiej rozmowy dobrze. Przeglądam CV, czytam o projektach, w których osoba brała udział, staram się wyodrębnić mocne strony kandydata. Na tej podstawie powstają pierwsze pytania. Tak, do każdej rozmowy przygotowuję osobny zastaw pytań. Część z nich jest podobna, ale cała reszta uwarunkowana jest doświadczeniem i wiedzą danej osoby. Poświęcam swój czas, by nie marnować czasu innych. Tego też oczekuję od drugiej strony. Oczekuje przede wszystkim &lt;strong&gt;przygotowania&lt;/strong&gt; do rozmowy. Nie chodzi mi tutaj o umiejętność odpowiedzenia na wszystkie pytania prawidłowo. Zależy mi na ciekawej konwersacji dwóch osób z tej samej branży. Na wymianie poglądów, sprawdzeniu znajomości wybranej technologii, umiejętność logicznego myślenia, komunikatywności. Oczywiście czegoś innego będę oczekiwać od osoby początkującej, a czegoś innego od osoby doświadczonej.&lt;/p&gt;

&lt;p&gt;Tak jak już powiedziałam. Najważniejsze dla mnie jest &lt;strong&gt;bycie przygotowanym&lt;/strong&gt; do rozmowy. To jest klucz do sukcesu. Czasami jest tak, że ktoś jest naprawdę interesującym kandydatem. Oczywiście w dobrym znaczeniu. Ale z różnych względów nie jest osobą, której teraz poszukujemy. Nie ta technologia, nie ten poziom doświadczenia. Takie osoby się zapamiętuje i jeżeli tylko nadarza się okazja w przyszłości do podjęcia współpracy, to ją wykorzystujemy.&lt;/p&gt;

&lt;p&gt;Co to więc znaczy &lt;strong&gt;być dobrze przygotowanym&lt;/strong&gt;. Co trzeba zrobić by &lt;strong&gt;dobrze przygotować&lt;/strong&gt; się do rozmowy?&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Znajomość własnego CV&lt;/p&gt;

&lt;p&gt;Kiedy zaczynam swoje przygotowania zawsze czytam CV. To jest taki mój punkt startowy. Pytam o projekty, technologie, architekturę, wykorzystane rozwiązania. Wszystko co zostało wymienione w CV jest dla mnie informacją o kandydacie. Daty, projekty, przybliżony czas pracy w jednej firmie, dodatkowe umiejętności, szkolenia. Dlatego znajomość tego, co się podało w CV jest ważna. Jeżeli jesteś przed rozmową kwalifikacyjną, to przejrzyj swoje CV, zastanów się i przypomnij sobie ważne informacje z nim związane. Jakie były Twoje obowiązki w projekcie? Jakie technologie były tam wykorzystane? Jak rozwiązaliście problemy, które pojawiły się po drodze? Czytanie swojego CV na rozmowie nie robi dobrego wrażenia, tak samo jak sytuacja, w której mówisz, że nie pamiętasz, co robiłeś w ostatnim projekcie. Oczywiście jest to normalne, że coś co było 5 lat temu zaciera się w pamięci. Jednak jak już idziemy na tą rozmowę, to warto przypomnieć sobie te 2 - 3 ostatnie projekty. Chciałabym tu zaznaczyć też jeszcze jedną rzecz. Wpisywanie do CV umiejętności lub technologii, o których nie mamy pojęcia, to bardzo zły pomysł. Takie rzeczy można łatwo sprawdzić, trudniej jest natomiast poprawić to kiepskie, pierwsze wrażenie.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Znajomość projektów i firmy&lt;/p&gt;

&lt;p&gt;W zasadzie jest to część punktu pierwszego. Jednak chciałam to jeszcze bardziej zaznaczyć. Kto powinien znać projekty, nad którymi pracował lepiej niż Ty sam? Ja naprawdę o to pytam! O zakres obowiązków w projekcie, o architekturę i o wiele, wiele więcej. Jeżeli nie chcesz lub nie możesz o czymś mówić, to może lepiej nie umieszczać tego w CV? Zdaję sobie sprawę, że pewne elementy są objęte klauzulą poufności. Ale to Ty powinieneś przed rozmową sprawdzić, jakie informacje możesz ujawnić a jakich nie. Oto przykład jak mogą wyglądać moje pytania: Jeżeli w CV jest projekt oparty na mikroserwisach, to pewnie zapytam o wygląd tej architektury, sposób komunikacji między serwisami, o twoje zdanie na temat tego podejścia, wady, zalety, oto jak Ty rozumiesz mikroserwisy.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Co nowego w twojej technologii&lt;/p&gt;

&lt;p&gt;Bycie na bieżąco, to nie tylko kwestia rozmowy kwalifikacyjnej. Praca w IT, to moim zdaniem ciągły rozwój, nie można się zatrzymać i przestać rozwijać. Każdy powinien wiedzieć, co nowego słychać w jego dziedzinie. Zdaje sobie sprawę, że nie da się wiedzieć wszystkiego. Ja sama czasem tego nie ogarniam. Warto natomiast próbować raz na jakiś czas odświeżyć swoją wiedzę. Na rozmowie pewnie zapytam o najnowszą wersje języka, o nowości w nim pojawiające się, nowe biblioteki z jakimi miałaś/miałeś styczność, nowe podejścia lub koncepcje. Te pytania mają na celu sprawdzić, czy dbasz o swój rozwój. Nie chodzi o to by wiedzieć wszystko. Jeżeli czegoś nie znasz bądź szczera/szczery.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Narzędzia, sposób pracy, używane aplikacje&lt;/p&gt;

&lt;p&gt;Zawsze pytam o takie rzeczy. W jaki sposób pracujesz? Jakiego edytora używasz? Jakiego systemu używasz? O narzędzia do kontroli wersji? Jakie biblioteki, gemy? Wszystko co jest związane ze stylem/sposobem pracy. Jak być efektywnym, dobrze się komunikować, jak dbać o jakość kodu. Może wiesz coś o TDD, metrykach, PR/MR (pull/merge request), standardzie kodu, pracy zdalnej. Interesują mnie też Twoje opinie na te tematy. Pytam o to wszystko, ponieważ chcę wiedzieć jak świadomym programistą jesteś. Czy wiesz, że te wszystkie elementy składają się na Twoją efektywność i dobry ich dobór może polepszyć komfort Twojej pracy.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Architektura&lt;/p&gt;

&lt;p&gt;Co robisz by projekt był dobrze zorganizowany pod względem architektury? Jakości kodu? Jak pisać kod tak, by był łatwy i szybki w rozwijaniu? Wzorce projektowe? Zasady programowania obiektowego/funkcyjnego? Standardy w kodzie? Założenia języka?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Informacje o firmie&lt;/p&gt;

&lt;p&gt;To jest bardziej istotne dla Ciebie jako kandydata. Zdobycie jak najwięcej informacji na temat firmy, do której chcesz się zatrudnić. Czym się firma zajmuje? Jakie są produkty firmy? Na jakim rynku działa? Jak wygląda struktura firmy? Czasami podczas rozmowy zadaje pytanie odnośnie wiedzy o firmie, ale raczej rzadko. To bardziej Ciebie powinno interesować czy wizja i cele firmy są zgodne z Twoim światopoglądem. Czy to co robi firma Cię interesuje? Są to informacje, które warto wiedzieć przed wysłaniem CV. Zaoszczędzi to czas Tobie i innym.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Bądź przygotowany na pokazanie kodu&lt;/p&gt;

&lt;p&gt;Na krótkiej rozmowie trudno zadać wszystkie pytania i sprawdzić całą wiedzę. Zwłaszcza związaną z pisaniem kodu. Dlatego zawsze proszę o dostęp do projektów, które mogą zaprezentować kompetencje dotyczące pisania kodu. O coś co wykracza poza umiejętność uruchomienia komendy scaffold w Rails. Coś z czego jesteś dumny.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Bądź gotowy na kodowanie na żywo&lt;/p&gt;

&lt;p&gt;Wiem to dość stresująca sytuacja. Zwłaszcza gdy inna osoba praktycznie patrzy Ci na ręce. Dla mnie jest to jeden z lepszych sposobów sprawdzenia jakim programistą jesteś. W jaki sposób rozwiązujesz problemy, jak działa na Ciebie stres, w jaki sposób myślisz, jak wyglądają Twoje umiejętności komunikacyjne. W takim momencie nie myśl o tym, że ja tu jestem, po prostu mów co robisz, jak myślisz o problemie, pytaj jak coś jest nie jasne i będzie dobrze.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Metodologie&lt;/p&gt;

&lt;p&gt;Jeżeli pracowałaś lub pracowałeś już przy tworzeniu jakiegoś projektu, to na pewno wiesz coś na ten temat. Zastanów się jak pracujesz w zespole? Jaki duży jest zespół? W jaki sposób organizujesz sobie pracę? Czy towarzyszą temu jakieś procesy? Jak one się nazywają? Agile, Scrum, Waterfall, Lean? Czego używasz do komunikacji? Jak tworzysz nowe funkcjonalności? Jak naprawiasz błędy? W jaki sposób podchodzisz do klientów? Jak rozwiązujesz problemy? Co możesz powiedzieć o swoim procesie? Wady, zalety?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Pytania do mnie&lt;/p&gt;

&lt;p&gt;Jest naprawdę dużo rzeczy, o które możesz mnie zapytać. Może o to w jaki sposób pracuje nasz zespół. Nad czym teraz pracujemy. O naszą jakość kodu, architekturę. Zawsze jestem chętna by rozwiać wszelkie wątpliwości, opowiedzieć o zespole czy projekcie. Nie ma nic lepszego niż osoba, która we czego chce i nie boi się o to zapytać. W końcu Tobie też projekt i zespół powinien odpowiadać.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Na koniec bardzo ważna sprawa. To co tutaj napisałam to sprawy, na które ja zwracam uwagę. Czego oczekuje na rozmowie kwalifikacyjnej od kandydata. To nie jest sposób na oszukanie osoby rekrutującej, lecz na lepsze przygotowanie do rozmowy. Bądź szczery ze sobą i ze swoim rozmówcą. Przecież chodzi o to, by się wzajem poznać i sprawdzić czy będzie się Wam dobrze pracowało. Pamiętaj nie tylko firma wybiera swojego pracownika, ale też pracownik firmę. Każda strona powinna być zadowolona z dokonanego wyboru.&lt;/p&gt;

&lt;p&gt;To już wszystko na dziś. Znasz inne sposoby by być dobrze przygotowanym do rozmowy kwalifikacyjnej? Jeżeli tak, podziel się nimi w komentarzach. Miłego dnia i do następnego razu!&lt;/p&gt;
</description>
        <pubDate>Tue, 04 Apr 2017 00:00:00 -0400</pubDate>
        <link>https://womanonrails.com/pl/interview</link>
        <guid isPermaLink="true">https://womanonrails.com/pl/interview</guid>
        
        <category>rozmowa kwalifikacyjna</category>
        
        
        <category>praca</category>
        
      </item>
    
      
      <item>
        <title>Sublime Text - edytor tekstowy</title>
        <description>&lt;p&gt;Myślę, że prawie każdy programista ma swój ulubiony edytor tekstowy. Jedni lubią edytory takie jak &lt;a href=&quot;https://en.wikipedia.org/wiki/Vim_(text_editor)&quot;&gt;Vim&lt;/a&gt;, inni jak &lt;a href=&quot;https://notepad-plus-plus.org/&quot;&gt;Notepad++&lt;/a&gt; a ja uwielbiam &lt;a href=&quot;https://www.sublimetext.com/&quot;&gt;Sublime Text&lt;/a&gt;. Posiada on wiele skrótów klawiszowych, dodatków czy snippetów ułatwiających pracę z kodem lub ze zwykłym tekstem. Oto moim zadaniem najważniejsze zalety Sublime:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Możesz jednocześnie przeglądać 4 pliki w tym samym czasie.&lt;/p&gt;

&lt;p&gt;Sublime ma możliwość podzielenia okna programu na kilka części. Maksymalnie cztery. Chyba, że używasz dodatku &lt;a href=&quot;https://github.com/SublimeText/Origami&quot;&gt;Origami&lt;/a&gt;. Pozwala on dzielić okno programu na dowolną ilość paneli. W podstawowej wersji Sublime można wybierać pomiędzy kilkoma dostępnymi typami paneli. Można je zaleźć w &lt;code&gt;View -&amp;gt; Layout&lt;/code&gt;. Są tam też dostępne skróty klawiszowe do zarządzania tymi panelami. Ja osobiście lubię mieć otwarte dwa panele równocześnie. To bardzo ułatwia mi pracę w &lt;strong&gt;TDD&lt;/strong&gt;. Dzięki temu cały czas mam widoczny kod i testy nad którymi pracuję.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Wszystko jest konfigurowalne&lt;/p&gt;

&lt;p&gt;Wystarczy tylko wejść do &lt;code&gt;Preferences -&amp;gt; Settings&lt;/code&gt;. Są tam zapisane wszystkie ustawienia. Kolory, zachowania, skróty, ustawienia języków. Dosłownie wszystko. Polecam też przyjrzeć się innym opcjom dostępnym w zakładce menu &lt;code&gt;Preferences&lt;/code&gt;. A zwłaszcza &lt;code&gt;Packages&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Dodatki&lt;/p&gt;

&lt;p&gt;Jeżeli tylko chcesz rozszerzyć funkcjonalność Sublime to możesz przebierać w różnych dodatkach. Tutaj moje ulubione:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://emmet.io/&quot;&gt;Emmet&lt;/a&gt; - do szybkiego i łatwego tworzenia kodu HTML lub CSS&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/facelessuser/BracketHighlighter&quot;&gt;BracketHighlighter&lt;/a&gt; - podświetla otwarcie i zamknięcie konkretnego zagłębienia nawiasów, bardzo przydatny zwłaszcza przy pracy z językami takimi jak JavaScript, gdzie tych nawiasów jest sporo&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/jisaacks/GitGutter&quot;&gt;Git Gutter&lt;/a&gt; - pokazuje zmiany jakie zaszły w kodzie (jest zintegrowany z narzędziem o nazwie &lt;strong&gt;git&lt;/strong&gt;, pisałam o nim w artykule &lt;a href=&quot;/pl/what-is-git&quot;&gt;Co to jest git?&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/dzhibas/SublimePrettyJson&quot;&gt;SublimePrettyJson&lt;/a&gt; - pozwala za pomocą kombinacji klawiszy w czytelny sposób sformatować plik zawierający dane w formacie JSON&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/pderichs/sublime_rubocop&quot;&gt;RuboCop&lt;/a&gt; - pokazuje dobre praktyki pisania kodu w języku Ruby&lt;/li&gt;
&lt;li&gt;Linters (Coffee Script, CSS, Sass, JS) - narzędzia, które pokazują dobre praktyki pisania kodu w różnych językach w zależności od wybranego lintera&lt;/li&gt;
&lt;li&gt;Colorfull syntaxt - kolorowanie składni języka, jeżeli tylko brakuje Ci składni jakiegoś języka programowania zawsze można taką funkcjonalność doinstalować&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Zachęcam do samodzielnego poszukania innych dodatków.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Skróty, skróty skróty klawiszowe&lt;/p&gt;

&lt;p&gt;Jak mam być szczera uwielbiam skróty klawiszowe. To jest też główny powód, dla którego robię ten artykuł. Jak tylko jest to możliwe, to pracuje wyłącznie z klawiaturą. Dzięki temu oszczędzam czas. Sublime oferuje nam niezliczony zasób takich właśnie skrótów. Te z których korzystam na co dzień zamieściłam poniżej:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ctrl + k + b&lt;/code&gt; - włącza/wyłącza pasek boczny (z projektami)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ctrl + 0&lt;/code&gt; - przechodzi do paska bocznego, gdzie znajdują się katalogi z projektami (wtedy za pomocą strzałek można poruszać się pomiędzy plikami i katalogami, naciskając &lt;code&gt;enter ↩&lt;/code&gt; otwieramy plik w oknie głównym i przenosimy tam kursor)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ctrl + 1,2,3,4&lt;/code&gt; - przenosi kursor pomiędzy panelami wewnątrz okna głównego (w zależności od wybranej ilości paneli)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ctrl + ←, →&lt;/code&gt; - przechodzi do początku/końca słowa&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ctrl + shift + ←, →&lt;/code&gt; - zaznacza poprzednie/następne słowo&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ctrl + m&lt;/code&gt; - przeskakuje pomiędzy początkiem a końcem nawiasów w bieżącym fragmencie kodu&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ctrl + shift + m&lt;/code&gt; - zaznacza całe wnętrze nawiasu lub cudzysłowu&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ctrl + PgUp, PgDn&lt;/code&gt; - przechodzi do poprzedniej/następnej zakładki/pliku&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ctrl + tab&lt;/code&gt; - przechodzi do następnej używanej zakładki/pliku w jednym panelu/grupie&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ctrl + shift + tab&lt;/code&gt; - przechodzi do poprzedniej używanej zakładki/pliku w jednym panelu/grupie&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ctrl + ↑, ↓&lt;/code&gt; -  przesuwa bieżący plik do góry/na dół (jak przy poruszaniu za pomocą scrolla w myszce)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ctrl + shift + ↑, ↓&lt;/code&gt; - zamienia kolejnością sąsiadujące linie&lt;/li&gt;
&lt;li&gt;&lt;code&gt;crtl + /&lt;/code&gt; - zakomentowuje/odkomentowuje linie kodu (w zależności od wybranego języka programowania)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ctrl + delete&lt;/code&gt; - usuwa wszystkie znaki znajdujące się po kursorze (bez przechowywania tego w schowku)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ctrl + backspace&lt;/code&gt; - usuwa wszystkie znaki przed kursorem (bez przechowywania w schowku)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ctrl + k + k&lt;/code&gt; - usuwa wszystkie znaki znajdujące się po kursorze (bez przechowywania tego w schowku)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ctrl + shift + k&lt;/code&gt; - usuwa całą linię bez przechowywania wartości w schowku&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ctrl + ↩&lt;/code&gt; - dodaje dodatkową linię za kursorem&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ctrl + shift + ↩&lt;/code&gt; - dodaje dodatkową linię przed kursorem&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ctrl + j&lt;/code&gt; - dołącza linię poniżej do końca bieżącej linii&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ctrl + alt + j&lt;/code&gt; - pokazuje w czytelny sposób pliki w formacie JSON, możliwość korzystania z tego skrótu dzięki dodatkowi SublimePrettyJson&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ctrl + ]&lt;/code&gt; - dodaje wcięcie do zaznaczonych linii&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ctrl + [&lt;/code&gt; - usuwa wcięcie dla zaznaczonych linii&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ctrl + a&lt;/code&gt; - zaznacza cały plik&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ctrl + l&lt;/code&gt; - zaznacza całą linię&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ctrl + d&lt;/code&gt; - zaznacza słowo (powtarzanie tego skrótu pozwala na zaznaczanie kolejnych tych samych słów w pliku i pozwala na zmianę wielu miejsc w tym samym momencie)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ctrl + shift + d&lt;/code&gt; - duplikuje linię&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ctrl + k + u&lt;/code&gt; - zapisuje zaznaczony tekst dużymi literami&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ctrl + k + l&lt;/code&gt; - zapisuje zaznaczony tekst małymi literami&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ctrl + c&lt;/code&gt; - kopiuje zaznaczony tekst do schowka, jeżeli nie było zaznaczonego tekstu kopiuje całą linię, w której znajdował się kursor&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ctrl + v&lt;/code&gt; - wkleja wybrany tekst lub całą linię ze schowka&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ctrl + x&lt;/code&gt; - wycina zaznaczony tekst lub całą linię do schowka&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ctrl + g&lt;/code&gt; - pozwala na przejście do linii o wybranym numerze&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ctrl + ;&lt;/code&gt; - pozwala na przejście do wybranego w bieżącym pliku słowa&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ctrl + r&lt;/code&gt; - wyszukuje wybranego symbolu (funkcji, metody, klasy) w pliku&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ctrl + shift + r&lt;/code&gt; - wyszykuje wybranego symbolu (funkcji, metody, klasy) w całym projekcie&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ctrl + t&lt;/code&gt; - zamienia miejscami dwie sąsiednie litery&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ctrl + shift + t&lt;/code&gt; - otwiera ostatni zamknięty plik/tab (tak jak w przeglądarce)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ctrl + h&lt;/code&gt; - zamienia jedną frazę na drugą w bieżącym pliku&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ctrl + f&lt;/code&gt; - przeszukuje plik&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ctrl + shift + f&lt;/code&gt; - przeszukuje cały projekt/folder, można też zamienić frazę na inną w całym projekcie&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ctrl + q&lt;/code&gt; - całkowicie zamyka Sublime&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ctrl + w&lt;/code&gt; - zamyka bieżący plik/zakładkę&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ctrl + shift + w&lt;/code&gt; - zamyka bieżące okno&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ctrl + n&lt;/code&gt; - otwiera nową zakładkę/plik&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ctrl + shift + n&lt;/code&gt; - otwiera nowe okno&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ctrl + s&lt;/code&gt; -  zapisuje plik&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ctrl + shift + s&lt;/code&gt; - zapisuje plik z możliwością zmiany nazwy&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ctrl + o&lt;/code&gt; - otwiera plik&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ctrl + shift + o&lt;/code&gt; - otwiera folder&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ctrl + p&lt;/code&gt; - pozwala na szybkie wyszukanie i otwarcie pliku w projekcie (można wyszukiwać po pierwszych literach każdego członu nazwy przykładowo wpisując &lt;code&gt;mnf&lt;/code&gt; można znaleźć plik &lt;code&gt;my_new_file.txt&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ctrl + shift + p&lt;/code&gt; - linia poleceń do instalowania nowych dodatków i pakietów&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ctrl + z&lt;/code&gt; - cofa zmiany&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ctrl + shift + z&lt;/code&gt; - przywraca ostatnie zmiany&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ctrl + y&lt;/code&gt; - wykonuje ostatnią akcję jeszcze raz&lt;/li&gt;
&lt;li&gt;&lt;code&gt;f6&lt;/code&gt; - sprawdza pisownie w języku, który ma się ustawiony (w moim przypadku jest to angielski)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;f9&lt;/code&gt; - ustawia w kolejności alfabetycznej zaznaczone linie&lt;/li&gt;
&lt;li&gt;&lt;code&gt;f3&lt;/code&gt; - następna wyszukiwana fraza&lt;/li&gt;
&lt;li&gt;&lt;code&gt;f3 + shift&lt;/code&gt; - poprzednia wyszukiwana fraza&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Mam nadzieje, że będzie to dla Was pomocne. Do zobaczenia następnym razem!&lt;/p&gt;
</description>
        <pubDate>Thu, 23 Feb 2017 00:00:00 -0500</pubDate>
        <link>https://womanonrails.com/pl/sublime</link>
        <guid isPermaLink="true">https://womanonrails.com/pl/sublime</guid>
        
        <category>IDE</category>
        
        <category>edytor tekstowy</category>
        
        
        <category>narzędzia</category>
        
      </item>
    
      
      <item>
        <title>Zastosowanie metody each_with_object w Ruby</title>
        <description>&lt;p&gt;Ostatnio pracowałam z metodą &lt;code&gt;each_with_object&lt;/code&gt;. Jak zazwyczaj w takich sytuacjach zawsze staram się przed użyciem jakiejś metody sprawdzić jej dokumentację. Weszłam więc na &lt;a href=&quot;https://apidock.com/ruby/v1_9_2_180/Enumerable/each_with_object&quot;&gt;APIdock&lt;/a&gt; przeglądam zastosowanie oraz przykłady. Okazało się że nie było tam jednego z przypadków zastosowania. Chciałam go dodać, lecz bez powodzenia. Postanowiłam więc, że skoro czekam na rozwiązanie problemu ze strony APIdock mogę napisać krótką notatkę na temat metody &lt;code&gt;each_with_object&lt;/code&gt; tutaj.&lt;/p&gt;

&lt;p&gt;Najbardziej pożytecznym i wydaje mi się również popularnym użyciem tej metody jest podanie jako argumentu tablicy lub hasha (tablicy słownikowej). Można to zrobić przykładowo:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;[:foo, :bar, :jazz].each_with_object({}) do |item, hash|
  hash[item] = item.to_s.upcase
end
 =&amp;gt; {:foo=&amp;gt;&amp;quot;FOO&amp;quot;, :bar=&amp;gt;&amp;quot;BAR&amp;quot;, :jazz=&amp;gt;&amp;quot;JAZZ&amp;quot;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;lub&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;(1..10).each_with_object([]) do |item, array|
  array &amp;lt;&amp;lt; item ** 2
end
 =&amp;gt; [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Wiem te przykłady są trywialne, ale chodzi o to by zrozumieć samą konstrukcję użycia. Dzięki tej metodzie nie musimy deklarować tablicy przed pętlą:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;array = []
(1..10).each do |item|
  array &amp;lt;&amp;lt; item ** 2
end
array
 =&amp;gt; [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Oczywiście dla tego przykładu można by to zrobić z użyciem metody &lt;code&gt;map&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;(1..10).map { |item| item ** 2 }
 =&amp;gt; [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Innym ciekawym zastosowaniem &lt;code&gt;each_with_object&lt;/code&gt; jest zliczanie częstotliwości występowania:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;[&amp;#39;one&amp;#39;, &amp;#39;two&amp;#39;, &amp;#39;one&amp;#39;, &amp;#39;one&amp;#39;].each_with_object(Hash.new(0)) do |item, hash|
  hash[item] += 1
end
 =&amp;gt; {&amp;quot;one&amp;quot;=&amp;gt;3, &amp;quot;two&amp;quot;=&amp;gt;1}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;W tym przypadku ustawiamy domyślną wartość dla tablicy słownikowej na &lt;code&gt;0&lt;/code&gt;. Dzięki temu zliczanie ilości wystąpień elementów w tablicy jest szybkie i proste. Nie potrzebujemy warunku &lt;code&gt;if&lt;/code&gt; by zabezpieczyć się przed nieoczekiwaną wartością &lt;code&gt;nil&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;if hash[item]
  hash[item] += 1
else
  hash[item] = 0
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Uwaga&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;W metodzie &lt;code&gt;each_with_object&lt;/code&gt; nie można użyć niemutowalnych (inmutable) obiektów jak liczby. Przykład poniżej nie zwróci Wam 55 tylko 0.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;(1..10).each_with_object(0) do |item, sum|
  sum += item
end
 =&amp;gt; 0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Możemy to zrobić też inaczej:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;(1..10).reduce(:+)
 =&amp;gt; 55
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;lub&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;(1..10).inject(:+)
 =&amp;gt; 55
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;lub w Ruby on Rails:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;(1..10).sum
 =&amp;gt; 55
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Przy okazji czy wiecie jaka jest różnica między metodą &lt;code&gt;reduce&lt;/code&gt; a &lt;code&gt;inject&lt;/code&gt;? Nie ma różnicy. Te dwie metody to tak naprawdę jedna i ta sama metoda, ale mająca dwie nazwy tzw. &lt;a href=&quot;http://ruby-doc.org/core-2.4.0/Enumerable.html#method-i-inject&quot;&gt;alias&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;W tym momencie powinniśmy jeszcze wspomnieć o jednej rzeczy. Metodę &lt;code&gt;inject&lt;/code&gt; możemy stosować też bardzo podobnie do &lt;code&gt;each_with_object&lt;/code&gt;. Różnica jest w kolejności argumentów w bloku i tym że w ostatniej linii bloku dla metody &lt;code&gt;inject&lt;/code&gt; zawsze musimy zwrócić naszą wartość agregującą (przykładowo sumującą). Popatrzcie tutaj:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;(1..10).inject([]) do |array, item|
  array &amp;lt;&amp;lt; item ** 2
end
 =&amp;gt; [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;lub&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;[:foo, :bar, :jazz].inject({}) do |hash, item|
  hash[item] = item.to_s.upcase
  hash
end
 =&amp;gt; {:foo=&amp;gt;&amp;quot;FOO&amp;quot;, :bar=&amp;gt;&amp;quot;BAR&amp;quot;, :jazz=&amp;gt;&amp;quot;JAZZ&amp;quot;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Uwaga&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Kiedy używamy &lt;code&gt;array &amp;lt;&amp;lt; item ** 2&lt;/code&gt; zawsze zostaje tu zwrócona cała tablica, ale dla przykładu drugiego &lt;code&gt;hash[item] = item.to_s.upcase&lt;/code&gt; zwraca &lt;code&gt;item.to_s.upcase&lt;/code&gt; a nie &lt;code&gt;hash&lt;/code&gt; więc musimy pamiętać by w ostatniej linii bloku zawsze zwrócić &lt;code&gt;hash&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;A teraz brakujący przypadek. Metodę &lt;code&gt;each_with_object&lt;/code&gt; można nie tylko używać na tablicy czy enumeratorze ale również na hashu (tablicy słownikowej). Taki przypadek wygląda troszkę inaczej. Zobaczcie sami:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;{ foo: 1, bar: 2, jazz: 3 }.each_with_object({}) do |(key, value), hash|
  hash[key] = value**2
end
 =&amp;gt; {:foo=&amp;gt;1, :bar=&amp;gt;4, :jazz=&amp;gt;9}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;lub&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;{ foo: 1, bar: 2, jazz: 3 }.each_with_object([]) do |(key, value), array|
  array &amp;lt;&amp;lt; { id: value, name: key }
end
 =&amp;gt; [{:id=&amp;gt;1, :name=&amp;gt;:foo}, {:id=&amp;gt;2, :name=&amp;gt;:bar}, {:id=&amp;gt;3, :name=&amp;gt;:jazz}]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To był krótki przegląd tego co można zrobić z metodą &lt;code&gt;each_with_object&lt;/code&gt;. Mam nadzieje, że zastosowanie tej metody podoba się Wam tak samo jak mnie. Jeżeli macie jakieś pytania zostawcie je poniżej w komentarzach. Do zobaczenia następnym razem!&lt;/p&gt;
</description>
        <pubDate>Thu, 05 Jan 2017 00:00:00 -0500</pubDate>
        <link>https://womanonrails.com/pl/each-with-object</link>
        <guid isPermaLink="true">https://womanonrails.com/pl/each-with-object</guid>
        
        <category>Ruby</category>
        
        
        <category>programowanie</category>
        
      </item>
    
      
      <item>
        <title>Web Summit - Lizbona 2016</title>
        <description>&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;Zajęło mi trochę czasu od ostatniego postu. Tak wiele się wydarzyło: eventy, warsztaty, podróże. Na szczęście jestem z powrotem! Dzisiaj chciałabym się podzielić w Wami moimi spostrzeżeniami dotyczącymi wydarzenia &lt;a href=&quot;https://websummit.net/&quot;&gt;Web Summit&lt;/a&gt;. Jest to ogromna konferencja (a w zasadzie wystawa/targi nowych pomysłów). Kilka lat temu miałam przyjemność uczestniczyć w tej konferencji w &lt;a href=&quot;/pl/websummit&quot;&gt;Dublinie&lt;/a&gt;. Tym razem Web Summit odbywał się w Lizbonie. Zdecydowałam się przyjechać ze względu na darmowy bilet, który dostałam jako kobieta w IT. Może właśnie z tego powodu nie powinnam mówić o tym, co mi się nie podobało. Choć jak się tak nad tym dłużej zastanowić, to w jaki sposób można coś poprawić, jeżeli nie wie się, co było nie tak?&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Za duża konferencja dla mnie&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;W środowisku Ruby środowisku mamy takie powiedzenie: &lt;em&gt;Jeżeli chcesz zrobić dużą aplikację, po prostu jej nie rób&lt;/em&gt;. Myślę, że to samo dotyczy konferencji. Stanowczo ta konferencja była za duża. Za dużo osób czekających na metro. Za dużo osób czekających na wejście na teren konferencji. Za dużo osób w kolejce po jedzenie, oglądających prezentacje, oglądających starupy, idących do toalety itd.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Czy ja mam znaczenie?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Na Web Summit w Lizbonie było tak dużo uczestników, że człowiek zaczyna się zastanawiać, czy jest istotny podczas tej konferencji. Jestem pewna, że nikt nie zauważył by mojej nieobecności. Wszystko mogło by się odbyć beze mnie. Więc pojawia się pytanie: Czy moja obecność jest istotna? Czy liczy się moja opinia, moje zdanie, mój komfort? Czy jestem tylko kolejną osobą na tym ogromnym wydarzeniu?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Czy to jest miejsce dla programistki?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Jestem programistą i przyjechałam na Web Summit, by nauczyć się czegoś nowego. Nie posiadam swojego startupu, nie jestem osobą biznesu. Jestem tylko programistką. Z mojej perspektywy na miejscu było dużo ciekawych prezentacji czy paneli dyskusyjnych. Problem w tym, że w przeciągu 20 minut nie da się głęboko wejść w temat. Można, co najwyżej kogoś tematem zainteresować. Było to dla mnie rozczarowujące. Więcej czasu spędziłam rozmawiając z ludźmi przy stanowiskach startupowych, niż na oglądaniu prezentacji. Dzięki tym rozmowom dowiedziałam się więcej ciekawych i technicznych rzeczy, niż oglądając prezentacje. Nie zrozumcie mnie źle, na prawdę można było znaleźć interesujące prezentacje, ale z perspektywy programistki były za mało techniczne. Dla mnie Web Summit, to takie ogromne targi nowych pomysłów a nie konferencja. Bardziej miejsce dla biznesu niż dla programistów.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Z perspektywy kobiety&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Jestem bardzo wdzięczna, za możliwość wzięcia udziału w Web Summit. Widać było, że organizatorom zależy, by sprowadzić na to wydarzenie jak najwięcej kobiet z branży IT. Bardzo się ciesze, że organizatorzy widzą problem małej ilości kobiet w tym środowisku, starają się jakoś mu zaradzić. Ale myślę że nie tędy droga. Prosty przykład. Nawet jeżeli dostałam koszulkę w rozmiarze S w wersji męskiej, to jest ona na tyle duża, że mogę w niej co najwyżej spać. Druga sprawa, to osobna strefa dla kobiet z biletami &lt;em&gt;Women in Tech&lt;/em&gt;. Było to dla mnie kompletne nieporozumienie. Dlaczego mogły tam wejść tylko kobiety z biletami Women in Tech? Dlaczego pozostałe kobiety nie miały takiej możliwości? Dlaczego mężczyźni, którzy wspierają kobiety w IT, też nie mogli tam przebywać? Znam naprawdę niesamowitych mężczyzn, którzy wspierają zarówno mnie jak i inne kobiety w tej branży. Myślę, że zasłużyli na szacunek i proste dziękuje za to co robią. Jako kobieta nie potrzebują specjalnego traktowania w IT. Chce być traktowane tak samo poważnie i z takim samym szacunkiem jak mężczyźni. A ta strefa dla kobiet wyglądała dla mnie bardziej jak zoo czy akwarium, niż przestrzeń gdzie mogę się czuć bezpiecznie i trochę się zrelaksować. By zmienić wizerunek kobiety w IT nie możemy siedzieć w osobnej przestrzeni, &lt;strong&gt;musimy&lt;/strong&gt; wychodzić do ludzi i swoim przykładem pokazywać, że kobiety w IT mogą dawać sobie świetnie radę, że jesteśmy równie kompetentne co mężczyźni, że nie jesteśmy jakimś gatunkiem chronionym czy rzadko spotykanym okazem w zoo.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;Podsumowując&lt;/h2&gt;

&lt;p&gt;Dziękuje za to, że mogłam wziąć udział w tego rocznym Web Summit. Jednak patrząc z perspektywy programistki, gdybym kupiła ten bilet z własnych pieniędzy, byłabym bardzo rozczarowana. Naprawdę uwielbiam konferencje bardziej kameralne, gdzie wszyscy lub prawie wszyscy się znają lub kojarzą z widzenia. Gdzie moja obecność ma znaczenie. Gdzie ludzie dbają o siebie na wzajem. Brakowało mi tego na Web Summit. Najlepszą rzeczą jaką wyniosłam z tegorocznej wydarzenia to poznanie wspaniałych ludzi. Jestem naprawdę szczęśliwa, że nawet przy tak przytłaczającym tłumie można spotkać niesamowitych ludzi z różnych krajów. To wszystko, co chciałabym powiedzieć. Mam nadzieję, że następna edycja będzie lepsza.&lt;/p&gt;
</description>
        <pubDate>Sat, 19 Nov 2016 00:00:00 -0500</pubDate>
        <link>https://womanonrails.com/pl/websummit-lisbon-2016</link>
        <guid isPermaLink="true">https://womanonrails.com/pl/websummit-lisbon-2016</guid>
        
        <category>Web Summit</category>
        
        
        <category>konferencja</category>
        
      </item>
    
      
      <item>
        <title>Leaflet - Wstęp do map</title>
        <description>&lt;p&gt;Jestem z powrotem! Tym razem chciałabym pokazać Wam trochę map. Dzisiejszym tematem będzie: Jak w prosty sposób można obsłużyć mapy na własnej stronie internetowej. Do tego potrzebne nam będzie:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://leafletjs.com/&quot;&gt;Leaflet&lt;/a&gt; - biblioteka JavaScript do obsługi map&lt;/li&gt;
&lt;li&gt;Fragmenty mapy (Maps tiles)&lt;/li&gt;
&lt;li&gt;Ruby on Rails (nie jest wymagany, na początek wystarczy strona &lt;strong&gt;html&lt;/strong&gt;)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Zacznijmy od początku. Co to są &lt;strong&gt;map tiles&lt;/strong&gt;? Prostymi słowami, są to małe kwadratowe obrazki zawierające wygląd naszej mapy. Są one przygotowywane w postaci paczek, by można było na stronie wyświetlić większy fragment mapy.&lt;/p&gt;

&lt;h2&gt;Skąd możemy dostać takie fragmenty mapy?&lt;/h2&gt;

&lt;p&gt;Można zarejestrować się na stronie &lt;a href=&quot;https://www.mapbox.com/&quot;&gt;Mapbox&lt;/a&gt; i skorzystać z ich darmowego pakietu do obsługi map lub użyć &lt;a href=&quot;https://openstreetmap.org&quot;&gt;OpenStreetMap&lt;/a&gt;. Jest wiele serwisów, które dostarczają map tiles, na końcu tego artykułu postaram się wymienić kilka z nich.&lt;/p&gt;

&lt;h2&gt;Przygotowania&lt;/h2&gt;

&lt;p&gt;Gdy w naszym projekcie mamy już dołączoną bibliotekę &lt;strong&gt;Leaflet&lt;/strong&gt; i wybraliśmy z jakich talii będziemy korzystać możemy zacząć.&lt;/p&gt;

&lt;p&gt;W naszym pliku &lt;code&gt;index.html&lt;/code&gt; dodajemy następująca linijkę:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;map&amp;#39;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Po stronie JavaScript potrzebujemy jeszcze ustawić wybranego dostawcę map tiles. W tym przykładzie będę używać CoffeeScript ale każda z prezentowanych funkcjonalności jest też możliwa do osiągnięcia w czystym JavaScript.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coffee&quot; data-lang=&quot;coffee&quot;&gt;&lt;span class=&quot;nx&quot;&gt;jQuery&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;map = &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;map&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;50.301&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;18.654&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;Mapbox tiles&lt;/h4&gt;

&lt;figure&gt;
  &lt;a href=&quot;/images/leaflet/mapbox.png&quot;&gt;&lt;img src=&quot;/images/leaflet/mapbox.png&quot;&gt;&lt;/a&gt;
&lt;/figure&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coffee&quot; data-lang=&quot;coffee&quot;&gt;  &lt;span class=&quot;nx&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tileLayer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.png?access_token={accessToken}&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;attribution: &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;Map data &amp;amp;copy; &amp;lt;a href=&amp;quot;http://openstreetmap.org&amp;quot;&amp;gt;OpenStreetMap&amp;lt;/a&amp;gt; contributors, &amp;lt;a href=&amp;quot;http://creativecommons.org/licenses/by-sa/2.0/&amp;quot;&amp;gt;CC-BY-SA&amp;lt;/a&amp;gt;, Imagery © &amp;lt;a href=&amp;quot;http://mapbox.com&amp;quot;&amp;gt;Mapbox&amp;lt;/a&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;maxZoom: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;id: &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;your id&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;accessToken: &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;your token&amp;#39;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;OpenStreetMap tiles&lt;/h4&gt;

&lt;figure&gt;
  &lt;a href=&quot;/images/leaflet/osm.png&quot;&gt;&lt;img src=&quot;/images/leaflet/osm.png&quot;&gt;&lt;/a&gt;
&lt;/figure&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coffee&quot; data-lang=&quot;coffee&quot;&gt;  &lt;span class=&quot;nx&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tileLayer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;http://{s}.tile.osm.org/{z}/{x}/{y}.png&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;attribution: &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;Map data &amp;amp;copy; &amp;lt;a href=&amp;quot;http://openstreetmap.org&amp;quot;&amp;gt;OpenStreetMap&amp;lt;/a&amp;gt; contributors, &amp;lt;a href=&amp;quot;http://creativecommons.org/licenses/by-sa/2.0/&amp;quot;&amp;gt;CC-BY-SA&amp;lt;/a&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;maxZoom: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;Toner tiles&lt;/h4&gt;

&lt;figure&gt;
  &lt;a href=&quot;/images/leaflet/toner.png&quot;&gt;&lt;img src=&quot;/images/leaflet/toner.png&quot;&gt;&lt;/a&gt;
&lt;/figure&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coffee&quot; data-lang=&quot;coffee&quot;&gt;  &lt;span class=&quot;nx&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tileLayer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;http://tile.stamen.com/toner/{z}/{x}/{y}.png&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;attribution: &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;Map tiles by &amp;lt;a href=&amp;quot;http://stamen.com&amp;quot;&amp;gt;Stamen Design&amp;lt;/a&amp;gt;, under &amp;lt;a href=&amp;quot;http://creativecommons.org/licenses/by/3.0&amp;quot;&amp;gt;CC BY 3.0&amp;lt;/a&amp;gt;. Data by &amp;lt;a href=&amp;quot;http://openstreetmap.org&amp;quot;&amp;gt;OpenStreetMap&amp;lt;/a&amp;gt;, under &amp;lt;a href=&amp;quot;http://www.openstreetmap.org/copyright&amp;quot;&amp;gt;ODbL&amp;lt;/a&amp;gt;.&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;maxZoom: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;WaterColor tiles&lt;/h4&gt;

&lt;figure&gt;
  &lt;a href=&quot;/images/leaflet/watercolor.png&quot;&gt;&lt;img src=&quot;/images/leaflet/watercolor.png&quot;&gt;&lt;/a&gt;
&lt;/figure&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coffee&quot; data-lang=&quot;coffee&quot;&gt;  &lt;span class=&quot;nx&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tileLayer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;http://tile.stamen.com/watercolor/{z}/{x}/{y}.png&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;attribution: &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;Map tiles by &amp;lt;a href=&amp;quot;http://stamen.com&amp;quot;&amp;gt;Stamen Design&amp;lt;/a&amp;gt;, under &amp;lt;a href=&amp;quot;http://creativecommons.org/licenses/by/3.0&amp;quot;&amp;gt;CC BY 3.0&amp;lt;/a&amp;gt;. Data by &amp;lt;a href=&amp;quot;http://openstreetmap.org&amp;quot;&amp;gt;OpenStreetMap&amp;lt;/a&amp;gt;, under &amp;lt;a href=&amp;quot;http://creativecommons.org/licenses/by-sa/3.0&amp;quot;&amp;gt;CC BY SA&amp;lt;/a&amp;gt;.&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;maxZoom: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I to wszystko, po odświeżeniu przeglądarki powinniśmy widzieć już mapę.&lt;/p&gt;

&lt;h2&gt;Dodawanie obiektów na mapę&lt;/h2&gt;

&lt;p&gt;Teraz zaczyna się prawdziwa zabawa! Możemy zacząć dodawać różne obiekty na mapę. Jedną ważną rzecz watro tu zaznaczyć. Każdy obiekt, który będzie pojawiał się na mapie posiada swoje współrzędne (tak jak w układnie współrzędnych na Matematyce). Leaflet używa dwóch układów współrzędnych. Układu &lt;strong&gt;Kartezjańskiego&lt;/strong&gt; i układu typu &lt;strong&gt;Szerokość-długość geograficzna&lt;/strong&gt;. Pierwszy z nich podaje współrzędne punktu jako &lt;code&gt;[długość, szerokość]&lt;/code&gt; a drugi jako &lt;code&gt;[szerokość, długość]&lt;/code&gt;. Zapamiętanie, gdzie którego z tych systemów używamy jest bardzo proste. Dla obiektu &lt;code&gt;GeoJSON&lt;/code&gt; używamy układu &lt;strong&gt;Kartezjańskiego&lt;/strong&gt; dla pozostałych elementów układu &lt;strong&gt;Geograficznego&lt;/strong&gt;.&lt;/p&gt;

&lt;h4&gt;Marker&lt;/h4&gt;

&lt;figure&gt;
  &lt;a href=&quot;/images/leaflet/marker.png&quot;&gt;&lt;img src=&quot;/images/leaflet/marker.png&quot;&gt;&lt;/a&gt;
&lt;/figure&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coffee&quot; data-lang=&quot;coffee&quot;&gt;&lt;span class=&quot;nv&quot;&gt;marker = &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;marker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;50.28895538456755&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;18.681907653808594&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;Custom marker&lt;/h4&gt;

&lt;figure&gt;
  &lt;a href=&quot;/images/leaflet/custom-marker.png&quot;&gt;&lt;img src=&quot;/images/leaflet/custom-marker.png&quot;&gt;&lt;/a&gt;
&lt;/figure&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coffee&quot; data-lang=&quot;coffee&quot;&gt;&lt;span class=&quot;nv&quot;&gt;customIcon = &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;icon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;iconUrl: &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;assets/womanonrails.jpg&amp;#39;&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;iconSize: &lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;iconAnchor: &lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;className: &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;round&amp;#39;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;customMarker = &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;marker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;50.29391802001304&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;18.665471076965332&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;icon: &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;customIcon&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;HTML marker&lt;/h4&gt;

&lt;figure&gt;
  &lt;a href=&quot;/images/leaflet/html-marker.png&quot;&gt;&lt;img src=&quot;/images/leaflet/html-marker.png&quot;&gt;&lt;/a&gt;
&lt;/figure&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coffee&quot; data-lang=&quot;coffee&quot;&gt;&lt;span class=&quot;nv&quot;&gt;divIcon = &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;divIcon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;className: &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;div-icon&amp;#39;&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;html: &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;&amp;lt;div&amp;gt;This is my custom html&amp;lt;/div&amp;gt;&amp;#39;&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;iconSize: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;marker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;50.2845132498121&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;18.668603897094727&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;icon: &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;divIcon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;Okrąg&lt;/h4&gt;

&lt;figure&gt;
  &lt;a href=&quot;/images/leaflet/circle.png&quot;&gt;&lt;img src=&quot;/images/leaflet/circle.png&quot;&gt;&lt;/a&gt;
&lt;/figure&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coffee&quot; data-lang=&quot;coffee&quot;&gt;&lt;span class=&quot;nv&quot;&gt;circle = &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;circle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;50.290024725454515&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;18.640880584716797&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;color: &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;red&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;fillColor: &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;#f03&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;fillOpacity: &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;Wielokąt&lt;/h4&gt;

&lt;figure&gt;
  &lt;a href=&quot;/images/leaflet/poligon.png&quot;&gt;&lt;img src=&quot;/images/leaflet/poligon.png&quot;&gt;&lt;/a&gt;
&lt;/figure&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coffee&quot; data-lang=&quot;coffee&quot;&gt;&lt;span class=&quot;nv&quot;&gt;polygon = &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;polygon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;50.29830444909283&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;18.61384391784668&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;50.29619353058144&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;18.620710372924805&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;50.29084727901576&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;18.616890907287598&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;50.29125855046426&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;18.61354351043701&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;50.2941373510724&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;mf&quot;&gt;18.611998558044434&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;50.29830444909283&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;18.61384391784668&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;Popups&lt;/h4&gt;

&lt;figure&gt;
  &lt;a href=&quot;/images/leaflet/popup.png&quot;&gt;&lt;img src=&quot;/images/leaflet/popup.png&quot;&gt;&lt;/a&gt;
&lt;/figure&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coffee&quot; data-lang=&quot;coffee&quot;&gt;&lt;span class=&quot;nx&quot;&gt;marker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bindPopup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;lt;b&amp;gt;Hello world!&amp;lt;/b&amp;gt;&amp;lt;br&amp;gt;I am a popup.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;openPopup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;circle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bindPopup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;I am a circle.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;polygon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bindPopup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;I am a polygon.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coffee&quot; data-lang=&quot;coffee&quot;&gt;&lt;span class=&quot;nv&quot;&gt;popup = &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;popup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setLatLng&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;51.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.09&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setContent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;I am a standalone popup.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;openOn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;Zdarzenia&lt;/h4&gt;

&lt;figure&gt;
  &lt;a href=&quot;/images/leaflet/event.png&quot;&gt;&lt;img src=&quot;/images/leaflet/event.png&quot;&gt;&lt;/a&gt;
&lt;/figure&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coffee&quot; data-lang=&quot;coffee&quot;&gt;&lt;span class=&quot;nv&quot;&gt;onMapClick = &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;(e) -&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Coordinate: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;latlng&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;click&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;onMapClick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coffee&quot; data-lang=&quot;coffee&quot;&gt;&lt;span class=&quot;nv&quot;&gt;onMapClick = &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;(e) -&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;popup = &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;popup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;popup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setLatLng&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;latlng&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;popup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setContent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;You clicked the map at &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;latlng&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;popup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;openOn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Coordinate: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;latlng&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;click&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;onMapClick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;GeoJSON&lt;/h4&gt;

&lt;p&gt;Myślę, że &lt;code&gt;geoJson&lt;/code&gt; jest jedną z najbardziej wszechstronnych opcji biblioteki Leaflet. Dzięki niej można wyświetlać wszystkie dotychczas poznane obiekty. Dodatkowo można w łatwy sposób zmienić style obiektów, podpinać do nich zdarzenia a także wyświetlać na mapie dane &lt;strong&gt;GIS&lt;/strong&gt; bezpośrednio z bazy danych takiej jak &lt;a href=&quot;https://www.postgresql.org/&quot;&gt;PostgreSQL&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coffee&quot; data-lang=&quot;coffee&quot;&gt;&lt;span class=&quot;nv&quot;&gt;geoData = &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Feature&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;properties&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{},&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;geometry&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Polygon&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&amp;quot;coordinates&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;18.613758087158203&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;50.298386690775416&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;18.618135452270508&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;50.3022518894775&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;18.619508743286133&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;50.302279301112605&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;18.62457275390625&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;50.30570563109659&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;18.62959384918213&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;50.30510261491786&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;18.624873161315918&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;50.3016488295082&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;18.627877235412598&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;50.3005797498622&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;18.622384071350098&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;50.29600162425392&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;18.613758087158203&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;50.298386690775416&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;style = &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;color&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;#ff7800&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;weight&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;opacity&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.65&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;geoJson&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;geoData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;style: &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Na koniec&lt;/h2&gt;

&lt;p&gt;To co pokazałam to tylko mały wycinek tego co można zrobić dzięki bibliotece &lt;strong&gt;Leaflet&lt;/strong&gt;. Jeżeli szukasz bardziej zaawansowanych funkcji (jak na przykład rysowanie kształtów) zapraszam do zapoznania się z poniższymi linkami:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://leafletjs.com/&quot;&gt;Leaflet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Leaflet/Leaflet.draw&quot;&gt;Leaflet Draw&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://geojson.io/&quot;&gt;GeoJSON&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.liedman.net/leaflet-routing-machine/&quot;&gt;Leaflet Routing Machine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://openlayers.org/&quot;&gt;OpenLayers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developers.google.com/maps/documentation/javascript/?csw=1&quot;&gt;Google Maps Javascript API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/modestmaps/modestmaps-js&quot;&gt;Modest Maps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://openstreetmap.org&quot;&gt;OpenStreetMap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.microsoft.com/maps/&quot;&gt;Bing maps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.google.pl/maps?source=tldso&quot;&gt;Google Maps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.mapbox.com/&quot;&gt;Mapbox&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.maptiler.com/&quot;&gt;MapTiler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://maps.stamen.com/&quot;&gt;Maps Stamen&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.mapquest.com/&quot;&gt;Map Quest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://wiki.openstreetmap.org/wiki/Tiles&quot;&gt;Tiles&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sat, 13 Aug 2016 00:00:00 -0400</pubDate>
        <link>https://womanonrails.com/pl/leaflet</link>
        <guid isPermaLink="true">https://womanonrails.com/pl/leaflet</guid>
        
        <category>JavaScript</category>
        
        <category>GIS</category>
        
        
        <category>programowanie</category>
        
      </item>
    
      
      <item>
        <title>Praca zdalna</title>
        <description>&lt;p&gt;Moim zdaniem pracę zdalną możemy podzielić na dwa typy. &lt;strong&gt;Synchroniczną&lt;/strong&gt; i &lt;strong&gt;asynchroniczną&lt;/strong&gt;. Synchroniczna praca zdalna jest wtedy, gdy zespół pracuje z różnych miejsc na świecie, ale pracuje w tym samym czasie (tej samej strefie czasowej). Przykładowo, ja pracuję według czasu środkowoeuropejskiego od 9:00 do 17:00. Natomiast, asynchroniczna praca zdalna, to praca nie tylko z różnych miejsc na świecie, ale również w różnych godzinach. W takim przypadku, może okazać się, że w konkretnym momencie tylko Ty pracujesz nad projektem.&lt;/p&gt;

&lt;p&gt;Ponieważ mam doświadczenie tylko w synchronicznej pracy zdalnej, więc skupię się właśnie na tym sposobie pracy.&lt;/p&gt;

&lt;h2&gt;Dzień po dniu&lt;/h2&gt;

&lt;p&gt;Pracując zdanie czy to z domu czy z biura, przez większość czasu praca wygląda zupełnie tak samo, jakby pracowało się w normalnej stacjonarnej firmie. Można powiedzieć, że każda osoba w zespole ma swoje osobne pomieszczenie (pełen komfort), tylko że nie przemieszczamy się pomiędzy tymi pomieszczeniami. Każdy siedzi w swoim pokoju. Raz dziennie spotykamy się wspólnie, używając narzędzi takich jak Hangout czy Skype. I to tyle. Resztę czasu poświęca się na zadania, które ma się do zrobienia. Gdy ktoś z nas potrzebuje porozmawiać z inną osobą z zespołu, używamy komunikatorów tekstowych takich jak Slack czy Skype. Najważniejsze w takiej pracy jest &lt;strong&gt;zaufanie&lt;/strong&gt;. Zaufanie, że każda osoba w zespole robi to co do niej należy i że robi to najlepiej jak potrafi.&lt;/p&gt;

&lt;h3&gt;Moje obserwacje:&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Im mniej ludzi wokół mnie, tym lepiej potrafię się skupić.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Ile razy zdarzyło Wam się zmarnować czas na jakieś niepotrzebne rozmowy w pracy? Ile razy ktoś przyszedł do Was, zapytać o coś lub po prostu zagadać? Ile czasu zmarnowaliście na niepotrzebne spotkania, z których i tak nic nie wynieśliście? Jest mnóstwo powodu, by nie robić tego, co się powinno w trakcie pracy.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Mogę pracować z każdego miejsca na świecie. Czy to biuro, mój dom, Warszawa, Kraków czy Australia&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To jest jeden z największych plusów pracy zdalnej. Można pracować z domu, kiedy zajdzie taka potrzeba. Odwiedzić znajomych lub rodzinę i pracować od nich. Można też wyjechać do innego kraju.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Potrzebna jest dobra organizacja swojego czasu pracy a także komunikacji z innymi.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Ponieważ mój zespół spotyka się na raz dziennie na bardzo krótkim spotkaniu (około 15 minut), o wiele lepiej spotkanie przebiega, gdy jesteśmy do niego przygotowani. Wiemy o co zapytać, na co zwrócić uwagę i o czym poinformować resztę zespołu. Każdy z nas musi być dobrze zorganizowany. Nie ma miejsca na marnowanie czasu. Motywacja do pracy nie może pochodzić z zewnątrz. Z tego, że ktoś Cię kontroluje i patrzy Ci na ręce. Nie ma takiej osoby. Liczy się zaufanie. Ja ufam reszcie zespołu a zespół ufa mi.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Każda rzecz w projekcie powinna być udokumentowana.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Wiele funkcjonalności w projekcie, jest tworzone równolegle przez różne osoby. Ponieważ komunikacja twarzą w twarz, przy pracy zdalnej jest ograniczona, wszystkie istotne elementy zapisuje się w dokumentacji. Pozwala to, na zapoznanie się z już istniejącymi elementami/procesami, z którymi nie mieliśmy jeszcze styczności. Dokumentacja dotyczy sposobu pracy, stawiania środowiska, dodawanej funkcjonalności, logiki i wielu innych rzeczy.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;Praca zdalna z Australii&lt;/h2&gt;

&lt;p&gt;Tak jak już mówiłam, pracując zdalnie można pracować z każdego miejsca na świecie. Ja zdecydowałam, że spędzę prawie 2 miesiące w Australii i będę stamtąd pracować zdalnie. Były momenty, gdy praca z Australii była prosta. Czas płyną szybko i produktywnie. Ale były też momenty, gdy było bardzo ciężko. Mój zespół pracuje z Europy (czyli w czasie środkowoeuropejskim), kiedy więc przeniosłam się do Australii moje godziny pracy zmieniły się z 9 do 17 na od 18 do 2 nad ranem. Jak już mówiłam pracujemy w zespole synchronicznie. Zdecydowałam, że będę pracować tylko przez połowę czasu. Dziękuje bardzo mojemu zespołowi, że było to możliwe. Moimi nowymi godzinami pracy były 18 do 22. Czasami zdarzało się, że byłam zmęczona po całym dniu, ale trzeba było postawić się do pionu i zacząć pracować. Pracowałam z przeróżnych miejsc. Przez większość czasu pracowałam ze swojej sypialni, ale zdarzało się pracować z centrum handlowego, z kanapy w pokoju gościnnym znajomych, hoteli czy nawet z samochodu. Tego ostatniego miejsca nie polecam osobom z chorobą lokomocyjną. Czasem zdarzały się problemy z Internetem lub po prostu jego brak. W takich sytuacjach pracowałam przy pomocy Internetu mobilnego. Tak Internetu mobilnego! A czasem po prostu chciałam spędzić wieczór z przyjaciółmi, jednak miałam obowiązki do wykonania.&lt;/p&gt;

&lt;p&gt;Chociaż zdarzały się ciężkie chwile i problemy, to stwierdzam, że to był wspaniały czas. Dzień rozpoczynałam o 7 rano czasu australijskiego. Robiła szybkie ćwiczenia, poświęcałam trochę czasu na moje zainteresowania i miałam osiem godzin na odkrywanie Australii. Wieczorami siadałam przy moim komputerze i zaczynałam pracować. Dzięki pracy zdalnej mogła zwiedzić cudowne miejsca. Przez cały czas czułam się jak na wakacjach. Bardzo długich wakacjach. Jeżeli ktoś by mnie kiedyś zapytał czy było warto, stanowczo odpowiedziałabym &lt;strong&gt;TAK&lt;/strong&gt;.&lt;/p&gt;

&lt;figure&gt;
  &lt;a href=&quot;/images/remote/duck.jpg&quot;&gt;&lt;img src=&quot;/images/remote/duck.jpg&quot;&gt;&lt;/a&gt;
&lt;/figure&gt;

&lt;figure class=&quot;third&quot;&gt;
  &lt;a href=&quot;/images/remote/memo1.jpg&quot;&gt;&lt;img src=&quot;/images/remote/memo1.jpg&quot;&gt;&lt;/a&gt;
  &lt;a href=&quot;/images/remote/memo2.jpg&quot;&gt;&lt;img src=&quot;/images/remote/memo2.jpg&quot;&gt;&lt;/a&gt;
  &lt;a href=&quot;/images/remote/memo3.jpg&quot;&gt;&lt;img src=&quot;/images/remote/memo3.jpg&quot;&gt;&lt;/a&gt;
&lt;/figure&gt;

&lt;figure&gt;
  &lt;a href=&quot;/images/remote/formula1.jpg&quot;&gt;&lt;img src=&quot;/images/remote/formula1.jpg&quot;&gt;&lt;/a&gt;
&lt;/figure&gt;

&lt;figure class=&quot;third&quot;&gt;
  &lt;a href=&quot;/images/remote/memo4.jpg&quot;&gt;&lt;img src=&quot;/images/remote/memo4.jpg&quot;&gt;&lt;/a&gt;
  &lt;a href=&quot;/images/remote/memo5.jpg&quot;&gt;&lt;img src=&quot;/images/remote/memo5.jpg&quot;&gt;&lt;/a&gt;
  &lt;a href=&quot;/images/remote/victoria.jpg&quot;&gt;&lt;img src=&quot;/images/remote/victoria.jpg&quot;&gt;&lt;/a&gt;
  &lt;figcaption&gt;Wspomnienia z Australii&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2&gt;Podsumowując&lt;/h2&gt;

&lt;p&gt;Praca zdalna daje mnóstwo możliwości. Można pracować z różnych miejsc na świecie i odkrywać je z zupełnie innej perspektywy, nie tylko z perspektywy turysty. Trzeba pamiętać, że taki sposób pracy nie jest dla wszystkich. Trzeba być pewnym, że jest się wstanie skupić i wykonywać swoje obowiązki. Dzień po dniu. Dobra organizacja pracy, samozaparcie i konsekwencja to podstawa.&lt;/p&gt;

&lt;p&gt;Jeżeli zdecydujesz się na taki sposób pracy i będziesz chciała/chciał gdzieś wyjechać, to najpierw odpowiedz sobie na kilka pytań:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Czy w miejscu docelowym jest Internet? WiFi?&lt;/li&gt;
&lt;li&gt;Czy masz wszystkie potrzebne rzeczy, oprogramowanie, projekty na swoim laptopie?&lt;/li&gt;
&lt;li&gt;Czy zawsze będzie dostępny prąd?&lt;/li&gt;
&lt;li&gt;Ile chcę poświęcić czasu na pracę?&lt;/li&gt;
&lt;li&gt;Co będę robić w ramach mojej pracy?&lt;/li&gt;
&lt;li&gt;Gdzie będziesz pracować?&lt;/li&gt;
&lt;li&gt;Jak bardzo zorganizowana/zorganizowany jestem?&lt;/li&gt;
&lt;li&gt;Jak bardzo zmotywowana/zmotywowany jestem?&lt;/li&gt;
&lt;li&gt;Jaka jest strefa czasowa w miejscu przeznaczenia?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br&gt;
Z mojej perspektywy było to niesamowite doświadczenie. Jestem naprawdę szczęśliwa, że mogłam spróbować.
To wszystko na dziś. Mam nadzieje, że artykuł Wam się podobał. Jeżeli macie jakieś pytania, piszcie w komentarzach. Do następnego razu!&lt;/p&gt;
</description>
        <pubDate>Sun, 15 May 2016 00:00:00 -0400</pubDate>
        <link>https://womanonrails.com/pl/remote-work</link>
        <guid isPermaLink="true">https://womanonrails.com/pl/remote-work</guid>
        
        <category>praca zdalna</category>
        
        
        <category>praca</category>
        
      </item>
    
  </channel>
</rss>
